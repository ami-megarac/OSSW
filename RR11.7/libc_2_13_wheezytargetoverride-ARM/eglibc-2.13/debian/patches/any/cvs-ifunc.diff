2011-06-30  Aurelien Jarno  <aurelien@aurel32.net>

	* sysdeps/generic/dl-irel.h: fix protection against multiple
	inclusions.
	* sysdeps/generic/dl-irel.h (elf_ifunc_invoke): New.

2011-06-20  David S. Miller  <davem@davemloft.net>

	* sysdeps/sparc/sparc32/dl-plt.h: Protect against multiple
	inclusions.
	* sysdeps/sparc/sparc64/dl-plt.h: Likewise.

	* sysdeps/i386/dl-irel.h (elf_ifunc_invoke): New.
	(elf_irel): Use it.
	* sysdeps/powerpc/powerpc32/dl-irel.h: Likewise.
	* sysdeps/powerpc/powerpc64/dl-irel.h: Likewise.
	* sysdeps/sparc/sparc32/dl-irel.h: Likewise.
	* sysdeps/sparc/sparc64/dl-irel.h: Likewise.
	* sysdeps/x86_64/dl-irel.h: Likewise.

	* elf/dl-runtime.c: Use elf_ifunc_invoke.
	* elf/dl-sym.c: Likewise.

---
 elf/dl-runtime.c                    |    9 ++++-----
 elf/dl-sym.c                        |    4 ++--
 sysdeps/generic/dl-irel.h           |    9 ++++++++-
 sysdeps/i386/dl-irel.h              |    9 ++++++++-
 sysdeps/powerpc/powerpc32/dl-irel.h |    9 ++++++++-
 sysdeps/powerpc/powerpc64/dl-irel.h |   11 +++++++++--
 sysdeps/sparc/sparc32/dl-irel.h     |   11 +++++++++--
 sysdeps/sparc/sparc32/dl-plt.h      |    5 +++++
 sysdeps/sparc/sparc64/dl-irel.h     |   11 +++++++++--
 sysdeps/sparc/sparc64/dl-plt.h      |    5 +++++
 sysdeps/x86_64/dl-irel.h            |    9 ++++++++-
 11 files changed, 75 insertions(+), 17 deletions(-)

--- a/elf/dl-runtime.c
+++ b/elf/dl-runtime.c
@@ -27,6 +27,7 @@
 #include <sysdep-cancel.h>
 #include "dynamic-link.h"
 #include <tls.h>
+#include <dl-irel.h>
 
 
 #if (!defined ELF_MACHINE_NO_RELA && !defined ELF_MACHINE_PLT_REL) \
@@ -146,7 +147,7 @@
 
   if (sym != NULL
       && __builtin_expect (ELFW(ST_TYPE) (sym->st_info) == STT_GNU_IFUNC, 0))
-    value = ((DL_FIXUP_VALUE_TYPE (*) (void)) DL_FIXUP_VALUE_ADDR (value)) ();
+    value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));
 
   /* Finally, fix up the plt itself.  */
   if (__builtin_expect (GLRO(dl_bind_not), 0))
@@ -235,8 +236,7 @@
 	  if (defsym != NULL
 	      && __builtin_expect (ELFW(ST_TYPE) (defsym->st_info)
 				   == STT_GNU_IFUNC, 0))
-	    value = ((DL_FIXUP_VALUE_TYPE (*) (void))
-		     DL_FIXUP_VALUE_ADDR (value)) ();
+	    value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));
 	}
       else
 	{
@@ -246,8 +246,7 @@
 
 	  if (__builtin_expect (ELFW(ST_TYPE) (refsym->st_info)
 				== STT_GNU_IFUNC, 0))
-	    value = ((DL_FIXUP_VALUE_TYPE (*) (void))
-		     DL_FIXUP_VALUE_ADDR (value)) ();
+	    value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));
 
 	  result = l;
 	}
--- a/elf/dl-sym.c
+++ b/elf/dl-sym.c
@@ -27,6 +27,7 @@
 #include <dl-hash.h>
 #include <sysdep-cancel.h>
 #include <dl-tls.h>
+#include <dl-irel.h>
 
 
 #ifdef SHARED
@@ -196,8 +197,7 @@
 	{
 	  DL_FIXUP_VALUE_TYPE fixup
 	    = DL_FIXUP_MAKE_VALUE (result, (ElfW(Addr)) value);
-	  fixup =
-	    ((DL_FIXUP_VALUE_TYPE (*) (void)) DL_FIXUP_VALUE_ADDR (fixup)) ();
+	  fixup = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (fixup));
 	  value = (void *) DL_FIXUP_VALUE_CODE_ADDR (fixup);
 	}
 
--- a/sysdeps/i386/dl-irel.h
+++ b/sysdeps/i386/dl-irel.h
@@ -26,6 +26,13 @@
 
 #define ELF_MACHINE_IREL	1
 
+static inline Elf32_Addr
+__attribute ((always_inline))
+elf_ifunc_invoke (Elf32_Addr addr)
+{
+  return ((Elf32_Addr (*) (void)) (addr)) ();
+}
+
 static inline void
 __attribute ((always_inline))
 elf_irel (const Elf32_Rel *reloc)
@@ -35,7 +42,7 @@
 
   if (__builtin_expect (r_type == R_386_IRELATIVE, 1))
     {
-      Elf32_Addr value = ((Elf32_Addr (*) (void)) (*reloc_addr)) ();
+      Elf32_Addr value = elf_ifunc_invoke(*reloc_addr);
       *reloc_addr = value;
     }
   else
--- a/sysdeps/powerpc/powerpc32/dl-irel.h
+++ b/sysdeps/powerpc/powerpc32/dl-irel.h
@@ -26,6 +26,13 @@
 
 #define ELF_MACHINE_IRELA	1
 
+static inline Elf32_Addr
+__attribute ((always_inline))
+elf_ifunc_invoke (Elf32_Addr addr)
+{
+  return ((Elf32_Addr (*) (void)) (addr)) ();
+}
+
 static inline void
 __attribute ((always_inline))
 elf_irela (const Elf32_Rela *reloc)
@@ -35,7 +42,7 @@
   if (__builtin_expect (r_type == R_PPC_IRELATIVE, 1))
     {
       Elf32_Addr *const reloc_addr = (void *) reloc->r_offset;
-      Elf32_Addr value = ((Elf32_Addr (*) (void)) reloc->r_addend) ();
+      Elf32_Addr value = elf_ifunc_invoke(reloc->r_addend);
       *reloc_addr = value;
     }
   else
--- a/sysdeps/powerpc/powerpc64/dl-irel.h
+++ b/sysdeps/powerpc/powerpc64/dl-irel.h
@@ -33,6 +33,13 @@
   Elf64_Addr fd_aux;
 } Elf64_FuncDesc;
 
+static inline Elf64_Addr
+__attribute ((always_inline))
+elf_ifunc_invoke (Elf64_Addr addr)
+{
+  return ((Elf64_Addr (*) (void)) (addr)) ();
+}
+
 static inline void
 __attribute ((always_inline))
 elf_irela (const Elf64_Rela *reloc)
@@ -42,13 +49,13 @@
   if (__builtin_expect (r_type == R_PPC64_IRELATIVE, 1))
     {
       Elf64_Addr *const reloc_addr = (void *) reloc->r_offset;
-      Elf64_Addr value = ((Elf64_Addr (*) (void)) reloc->r_addend) ();
+      Elf64_Addr value = elf_ifunc_invoke(reloc->r_addend);
       *reloc_addr = value;
     }
   else if (__builtin_expect (r_type == R_PPC64_JMP_IREL, 1))
     {
       Elf64_Addr *const reloc_addr = (void *) reloc->r_offset;
-      Elf64_Addr value = ((Elf64_Addr (*) (void)) reloc->r_addend) ();
+      Elf64_Addr value = elf_ifunc_invoke(reloc->r_addend);
       *(Elf64_FuncDesc *) reloc_addr = *(Elf64_FuncDesc *) value;
     }
   else
--- a/sysdeps/sparc/sparc32/dl-irel.h
+++ b/sysdeps/sparc/sparc32/dl-irel.h
@@ -28,6 +28,13 @@
 
 #define ELF_MACHINE_IRELA	1
 
+static inline Elf32_Addr
+__attribute ((always_inline))
+elf_ifunc_invoke (Elf32_Addr addr)
+{
+  return ((Elf32_Addr (*) (int)) (addr)) (GLRO(dl_hwcap));
+}
+
 static inline void
 __attribute ((always_inline))
 elf_irela (const Elf32_Rela *reloc)
@@ -37,13 +44,13 @@
   if (__builtin_expect (r_type == R_SPARC_IRELATIVE, 1))
     {
       Elf32_Addr *const reloc_addr = (void *) reloc->r_offset;
-      Elf32_Addr value = ((Elf32_Addr (*) (int)) reloc->r_addend) (GLRO(dl_hwcap));
+      Elf32_Addr value = elf_ifunc_invoke(reloc->r_addend);
       *reloc_addr = value;
     }
   else if (__builtin_expect (r_type == R_SPARC_JMP_IREL, 1))
     {
       Elf32_Addr *const reloc_addr = (void *) reloc->r_offset;
-      Elf32_Addr value = ((Elf32_Addr (*) (int)) reloc->r_addend) (GLRO(dl_hwcap));
+      Elf32_Addr value = elf_ifunc_invoke(reloc->r_addend);
 
       sparc_fixup_plt (reloc, reloc_addr, value, 0, 1);
     }
--- a/sysdeps/sparc/sparc32/dl-plt.h
+++ b/sysdeps/sparc/sparc32/dl-plt.h
@@ -18,6 +18,9 @@
    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
    02111-1307 USA.  */
 
+#ifndef _DL_PLT_H
+#define _DL_PLT_H
+
 /* Some SPARC opcodes we need to use for self-modifying code.  */
 #define OPCODE_NOP	0x01000000 /* nop */
 #define OPCODE_CALL	0x40000000 /* call ?; add PC-rel word address */
@@ -95,3 +98,5 @@
 
   return value;
 }
+
+#endif /* dl-plt.h */
--- a/sysdeps/sparc/sparc64/dl-irel.h
+++ b/sysdeps/sparc/sparc64/dl-irel.h
@@ -28,6 +28,13 @@
 
 #define ELF_MACHINE_IRELA	1
 
+static inline Elf64_Addr
+__attribute ((always_inline))
+elf_ifunc_invoke (Elf64_Addr addr)
+{
+  return ((Elf64_Addr (*) (int)) (addr)) (GLRO(dl_hwcap));
+}
+
 static inline void
 __attribute ((always_inline))
 elf_irela (const Elf64_Rela *reloc)
@@ -37,13 +44,13 @@
   if (__builtin_expect (r_type == R_SPARC_IRELATIVE, 1))
     {
       Elf64_Addr *const reloc_addr = (void *) reloc->r_offset;
-      Elf64_Addr value = ((Elf64_Addr (*) (int)) reloc->r_addend) (GLRO(dl_hwcap));
+      Elf64_Addr value = elf_ifunc_invoke(reloc->r_addend);
       *reloc_addr = value;
     }
   else if (__builtin_expect (r_type == R_SPARC_JMP_IREL, 1))
     {
       Elf64_Addr *const reloc_addr = (void *) reloc->r_offset;
-      Elf64_Addr value = ((Elf64_Addr (*) (int)) reloc->r_addend) (GLRO(dl_hwcap));
+      Elf64_Addr value = elf_ifunc_invoke(reloc->r_addend);
       struct link_map map = { .l_addr = 0 };
 
       /* 'high' is always zero, for large PLT entries the linker
--- a/sysdeps/sparc/sparc64/dl-plt.h
+++ b/sysdeps/sparc/sparc64/dl-plt.h
@@ -17,6 +17,9 @@
    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
    02111-1307 USA.  */
 
+#ifndef _DL_PLT_H
+#define _DL_PLT_H
+
 /* We have 4 cases to handle.  And we code different code sequences
    for each one.  I love V9 code models...  */
 static inline void __attribute__ ((always_inline))
@@ -161,3 +164,5 @@
       __asm __volatile ("flush %0" : : "r" (insns));
     }
 }
+
+#endif /* dl-plt.h */
--- a/sysdeps/x86_64/dl-irel.h
+++ b/sysdeps/x86_64/dl-irel.h
@@ -26,6 +26,13 @@
 
 #define ELF_MACHINE_IRELA	1
 
+static inline Elf64_Addr
+__attribute ((always_inline))
+elf_ifunc_invoke (Elf64_Addr addr)
+{
+  return ((Elf64_Addr (*) (void)) (addr)) ();
+}
+
 static inline void
 __attribute ((always_inline))
 elf_irela (const Elf64_Rela *reloc)
@@ -35,7 +42,7 @@
 
   if (__builtin_expect (r_type == R_X86_64_IRELATIVE, 1))
     {
-      Elf64_Addr value = ((Elf64_Addr (*) (void)) reloc->r_addend) ();
+      Elf64_Addr value = elf_ifunc_invoke(reloc->r_addend);
       *reloc_addr = value;
     }
   else
--- a/sysdeps/generic/dl-irel.h
+++ b/sysdeps/generic/dl-irel.h
@@ -17,7 +17,14 @@
    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
    02111-1307 USA.  */
 
-#ifndef _DL_IREL_h
+#ifndef _DL_IREL_H
 #define _DL_IREL_H
 
+static inline DL_FIXUP_VALUE_TYPE
+__attribute ((always_inline))
+elf_ifunc_invoke (ElfW(Addr) addr)
+{
+  return ((DL_FIXUP_VALUE_TYPE (*) (void)) (addr)) ();
+}
+
 #endif /* dl-irel.h */
