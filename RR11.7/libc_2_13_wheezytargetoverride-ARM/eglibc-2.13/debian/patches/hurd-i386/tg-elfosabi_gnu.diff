Subject: [PATCH] ELFOSABI_GNU

From: Samuel Thibault <samuel.thibault@ens-lyon.org>

binutils started emitting ELF files with ELFOSABI_GNU due to GNU-specific
ELF extensions. We need to accept loading such binaries on hurd-i386 too.

2011-06-19  Samuel Thibault  <samuel.thibault@ens-lyon.org>

        * sysdeps/mach/hurd/ldsodefs.h: New file, defines VALID_ELF_HEADER,
        VALID_ELF_OSABI, VALID_ELF_ABIVERSION, MORE_ELF_HEADER_DATA, declares
        _dl_non_dynamic_init.
        * sysdeps/unix/sysv/linux/ldsodefs.h (VALID_ELF_OSABI,
        VALID_ELF_ABIVERSION, MORE_ELF_HEADER_DATA): Use ELFOSABI_GNU instead of
        ELFOSABI_LINUX.
        * sysdeps/mach/hurd/powerpc/init-first.c (_dl_non_dynamic_init): Remove
        declaration.
	* sysdeps/mach/hurd/i386/init-first.c (_dl_non_dynamic_init): Likewise.

---

This is Debian glibc svn r4778 of patches/hurd-i386/submitted-ldsodefs.h.diff.

---

<http://www.bddebian.com:8888/~hurd-web/toolchain/elfosabi_gnu/>

---

TODO.  Can unify GNU/Linux and GNU/Hurd files and put them into sysdeps/gnu/?
TODO.  Correct some comment strings, s%Linux%GNU.

 sysdeps/mach/hurd/i386/init-first.c    |    3 -
 sysdeps/mach/hurd/ldsodefs.h           |   52 +++++++++++++++++++++++++++++++++
 sysdeps/mach/hurd/powerpc/init-first.c |    3 -
 sysdeps/unix/sysv/linux/ldsodefs.h     |    6 +--
 4 files changed, 55 insertions(+), 9 deletions(-)

--- a/sysdeps/mach/hurd/i386/init-first.c
+++ b/sysdeps/mach/hurd/i386/init-first.c
@@ -37,9 +37,6 @@
 #ifdef USE_NONOPTION_FLAGS
 extern void __getopt_clean_environment (char **);
 #endif
-#ifndef SHARED
-extern void _dl_non_dynamic_init (void) internal_function;
-#endif
 extern void __libc_global_ctors (void);
 
 unsigned int __hurd_threadvar_max;
--- /dev/null
+++ b/sysdeps/mach/hurd/ldsodefs.h
@@ -0,0 +1,52 @@
+/* Run-time dynamic linker data structures for loaded ELF shared objects.
+   Copyright (C) 2001, 2002, 2003, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifndef	_LDSODEFS_H
+
+#include <libc-abis.h>
+
+/* Get the real definitions.  */
+#include_next <ldsodefs.h>
+
+/* Now define our stuff.  */
+
+/* Initialization which is normally done by the dynamic linker.  */
+extern void _dl_non_dynamic_init (void) internal_function;
+
+/* Accept binaries which identify the binary as using Linux extensions.  */
+#define VALID_ELF_HEADER(hdr,exp,size)	(memcmp (hdr, exp, size) == 0	\
+					 || memcmp (hdr, expected2, size) == 0)
+#define VALID_ELF_OSABI(osabi)		(osabi == ELFOSABI_SYSV \
+					 || osabi == ELFOSABI_GNU)
+#define VALID_ELF_ABIVERSION(osabi,ver) \
+  (ver == 0 || (osabi == ELFOSABI_GNU && ver < LIBC_ABI_MAX))
+#define MORE_ELF_HEADER_DATA \
+  static const unsigned char expected2[EI_PAD] =	\
+  {							\
+    [EI_MAG0] = ELFMAG0,				\
+    [EI_MAG1] = ELFMAG1,				\
+    [EI_MAG2] = ELFMAG2,				\
+    [EI_MAG3] = ELFMAG3,				\
+    [EI_CLASS] = ELFW(CLASS),				\
+    [EI_DATA] = byteorder,				\
+    [EI_VERSION] = EV_CURRENT,				\
+    [EI_OSABI] = ELFOSABI_GNU				\
+  }
+
+#endif /* ldsodefs.h */
--- a/sysdeps/mach/hurd/powerpc/init-first.c
+++ b/sysdeps/mach/hurd/powerpc/init-first.c
@@ -32,9 +32,6 @@
 #ifdef USE_NONOPTION_FLAGS
 extern void __getopt_clean_environment (char **);
 #endif
-#ifndef SHARED
-extern void _dl_non_dynamic_init (void) internal_function;
-#endif
 extern void __libc_global_ctors (void);
 
 unsigned int __hurd_threadvar_max;
--- a/sysdeps/unix/sysv/linux/ldsodefs.h
+++ b/sysdeps/unix/sysv/linux/ldsodefs.h
@@ -58,9 +58,9 @@
 #define VALID_ELF_HEADER(hdr,exp,size)	(memcmp (hdr, exp, size) == 0	\
 					 || memcmp (hdr, expected2, size) == 0)
 #define VALID_ELF_OSABI(osabi)		(osabi == ELFOSABI_SYSV \
-					 || osabi == ELFOSABI_LINUX)
+					 || osabi == ELFOSABI_GNU)
 #define VALID_ELF_ABIVERSION(osabi,ver) \
-  (ver == 0 || (osabi == ELFOSABI_LINUX && ver < LIBC_ABI_MAX))
+  (ver == 0 || (osabi == ELFOSABI_GNU && ver < LIBC_ABI_MAX))
 #define MORE_ELF_HEADER_DATA \
   static const unsigned char expected2[EI_PAD] =	\
   {							\
@@ -71,7 +71,7 @@
     [EI_CLASS] = ELFW(CLASS),				\
     [EI_DATA] = byteorder,				\
     [EI_VERSION] = EV_CURRENT,				\
-    [EI_OSABI] = ELFOSABI_LINUX				\
+    [EI_OSABI] = ELFOSABI_GNU				\
   }
 
 #endif /* ldsodefs.h */
