Index: openssl-1.0.1e/crypto/opensslconf.h
===================================================================
--- openssl-1.0.1e.orig/crypto/opensslconf.h	2013-02-11 15:26:04.000000000 +0000
+++ openssl-1.0.1e/crypto/opensslconf.h	2016-06-13 15:04:40.000000000 +0000
@@ -5,12 +5,21 @@
 #ifndef OPENSSL_DOING_MAKEDEPEND
 
 
+#ifndef OPENSSL_NO_COMP
+# define OPENSSL_NO_COMP
+#endif
 #ifndef OPENSSL_NO_EC_NISTP_64_GCC_128
 # define OPENSSL_NO_EC_NISTP_64_GCC_128
 #endif
 #ifndef OPENSSL_NO_GMP
 # define OPENSSL_NO_GMP
 #endif
+#ifndef OPENSSL_NO_HEARTBEATS
+# define OPENSSL_NO_HEARTBEATS
+#endif
+#ifndef OPENSSL_NO_IDEA
+# define OPENSSL_NO_IDEA
+#endif
 #ifndef OPENSSL_NO_JPAKE
 # define OPENSSL_NO_JPAKE
 #endif
@@ -20,6 +29,12 @@
 #ifndef OPENSSL_NO_MD2
 # define OPENSSL_NO_MD2
 #endif
+#ifndef OPENSSL_NO_MDC2
+# define OPENSSL_NO_MDC2
+#endif
+#ifndef OPENSSL_NO_RC4
+# define OPENSSL_NO_RC4
+#endif
 #ifndef OPENSSL_NO_RC5
 # define OPENSSL_NO_RC5
 #endif
@@ -29,14 +44,32 @@
 #ifndef OPENSSL_NO_SCTP
 # define OPENSSL_NO_SCTP
 #endif
+#ifndef OPENSSL_NO_SRP
+# define OPENSSL_NO_SRP
+#endif
+#ifndef OPENSSL_NO_SSL2
+# define OPENSSL_NO_SSL2
+#endif
+#ifndef OPENSSL_NO_SSL3
+# define OPENSSL_NO_SSL3
+#endif
 #ifndef OPENSSL_NO_STORE
 # define OPENSSL_NO_STORE
 #endif
+#ifndef OPENSSL_NO_TLS1
+# define OPENSSL_NO_TLS1
+#endif
+#ifndef OPENSSL_NO_TLSEXT
+# define OPENSSL_NO_TLSEXT
+#endif
 
 #endif /* OPENSSL_DOING_MAKEDEPEND */
 
-#ifndef OPENSSL_NO_DYNAMIC_ENGINE
-# define OPENSSL_NO_DYNAMIC_ENGINE
+#ifndef OPENSSL_THREADS
+# define OPENSSL_THREADS
+#endif
+#ifndef OPENSSL_NO_STATIC_ENGINE
+# define OPENSSL_NO_STATIC_ENGINE
 #endif
 
 /* The OPENSSL_NO_* macros are also defined as NO_* if the application
@@ -44,12 +77,21 @@
    who haven't had the time to do the appropriate changes in their
    applications.  */
 #ifdef OPENSSL_ALGORITHM_DEFINES
+# if defined(OPENSSL_NO_COMP) && !defined(NO_COMP)
+#  define NO_COMP
+# endif
 # if defined(OPENSSL_NO_EC_NISTP_64_GCC_128) && !defined(NO_EC_NISTP_64_GCC_128)
 #  define NO_EC_NISTP_64_GCC_128
 # endif
 # if defined(OPENSSL_NO_GMP) && !defined(NO_GMP)
 #  define NO_GMP
 # endif
+# if defined(OPENSSL_NO_HEARTBEATS) && !defined(NO_HEARTBEATS)
+#  define NO_HEARTBEATS
+# endif
+# if defined(OPENSSL_NO_IDEA) && !defined(NO_IDEA)
+#  define NO_IDEA
+# endif
 # if defined(OPENSSL_NO_JPAKE) && !defined(NO_JPAKE)
 #  define NO_JPAKE
 # endif
@@ -59,6 +101,12 @@
 # if defined(OPENSSL_NO_MD2) && !defined(NO_MD2)
 #  define NO_MD2
 # endif
+# if defined(OPENSSL_NO_MDC2) && !defined(NO_MDC2)
+#  define NO_MDC2
+# endif
+# if defined(OPENSSL_NO_RC4) && !defined(NO_RC4)
+#  define NO_RC4
+# endif
 # if defined(OPENSSL_NO_RC5) && !defined(NO_RC5)
 #  define NO_RC5
 # endif
@@ -68,11 +116,28 @@
 # if defined(OPENSSL_NO_SCTP) && !defined(NO_SCTP)
 #  define NO_SCTP
 # endif
+# if defined(OPENSSL_NO_SRP) && !defined(NO_SRP)
+#  define NO_SRP
+# endif
+# if defined(OPENSSL_NO_SSL2) && !defined(NO_SSL2)
+#  define NO_SSL2
+# endif
+# if defined(OPENSSL_NO_SSL3) && !defined(NO_SSL3)
+#  define NO_SSL3
+# endif
 # if defined(OPENSSL_NO_STORE) && !defined(NO_STORE)
 #  define NO_STORE
 # endif
+# if defined(OPENSSL_NO_TLS1) && !defined(NO_TLS1)
+#  define NO_TLS1
+# endif
+# if defined(OPENSSL_NO_TLSEXT) && !defined(NO_TLSEXT)
+#  define NO_TLSEXT
+# endif
 #endif
 
+#define OPENSSL_CPUID_OBJ
+
 /* crypto/opensslconf.h.in */
 
 /* Generate 80386 code? */
@@ -80,8 +145,8 @@
 
 #if !(defined(VMS) || defined(__VMS)) /* VMS uses logical names instead */
 #if defined(HEADER_CRYPTLIB_H) && !defined(OPENSSLDIR)
-#define ENGINESDIR "/usr/local/ssl/lib/engines"
-#define OPENSSLDIR "/usr/local/ssl"
+#define ENGINESDIR "/usr/lib//openssl-1.0.0/engines"
+#define OPENSSLDIR "/usr/lib/ssl"
 #endif
 #endif
 
@@ -112,14 +177,14 @@
  * - Intel P6 because partial register stalls are very expensive;
  * - elder Alpha because it lacks byte load/store instructions;
  */
-#define RC4_INT unsigned int
+#define RC4_INT unsigned char
 #endif
 #if !defined(RC4_CHUNK)
 /*
  * This enables code handling data aligned at natural CPU word
  * boundary. See crypto/rc4/rc4_enc.c for further details.
  */
-#undef RC4_CHUNK
+#define RC4_CHUNK unsigned long
 #endif
 #endif
 
@@ -127,13 +192,13 @@
 /* If this is set to 'unsigned int' on a DEC Alpha, this gives about a
  * %20 speed up (longs are 8 bytes, int's are 4). */
 #ifndef DES_LONG
-#define DES_LONG unsigned long
+#define DES_LONG unsigned int
 #endif
 #endif
 
 #if defined(HEADER_BN_H) && !defined(CONFIG_HEADER_BN_H)
 #define CONFIG_HEADER_BN_H
-#undef BN_LLONG
+#define BN_LLONG
 
 /* Should we define BN_DIV2W here? */
 
@@ -152,7 +217,7 @@
 
 #if defined(HEADER_BF_LOCL_H) && !defined(CONFIG_HEADER_BF_LOCL_H)
 #define CONFIG_HEADER_BF_LOCL_H
-#undef BF_PTR
+#define BF_PTR
 #endif /* HEADER_BF_LOCL_H */
 
 #if defined(HEADER_DES_LOCL_H) && !defined(CONFIG_HEADER_DES_LOCL_H)
@@ -182,7 +247,7 @@
 /* Unroll the inner loop, this sometimes helps, sometimes hinders.
  * Very mucy CPU dependant */
 #ifndef DES_UNROLL
-#undef DES_UNROLL
+#define DES_UNROLL
 #endif
 
 /* These default values were supplied by
Index: openssl-1.0.1e/ssl/s23_clnt.c
===================================================================
--- openssl-1.0.1e.orig/ssl/s23_clnt.c	2016-06-13 14:53:35.000000000 +0000
+++ openssl-1.0.1e/ssl/s23_clnt.c	2016-06-13 15:05:40.000000000 +0000
@@ -129,8 +129,10 @@
 	if (ver == SSL3_VERSION)
 		return(SSLv3_client_method());
 #endif
+#ifndef OPENSSL_NO_TLS1
 	if (ver == TLS1_VERSION)
 		return(TLSv1_client_method());
+#endif
 	else if (ver == TLS1_1_VERSION)
 		return(TLSv1_1_client_method());
 	else if (ver == TLS1_2_VERSION)
@@ -696,13 +698,15 @@
 			}
 		else
 #endif
+#ifndef OPENSSL_NO_TLS1
 		if ((p[2] == TLS1_VERSION_MINOR) &&
 			!(s->options & SSL_OP_NO_TLSv1))
 			{
 			s->version=TLS1_VERSION;
 			s->method=TLSv1_client_method();
 			}
-		else if ((p[2] == TLS1_1_VERSION_MINOR) &&
+#endif
+		if ((p[2] == TLS1_1_VERSION_MINOR) &&
 			!(s->options & SSL_OP_NO_TLSv1_1))
 			{
 			s->version=TLS1_1_VERSION;
Index: openssl-1.0.1e/ssl/s23_srvr.c
===================================================================
--- openssl-1.0.1e.orig/ssl/s23_srvr.c	2016-06-13 14:53:35.000000000 +0000
+++ openssl-1.0.1e/ssl/s23_srvr.c	2016-06-13 15:05:18.000000000 +0000
@@ -131,9 +131,11 @@
 	if (ver == SSL3_VERSION)
 		return(SSLv3_server_method());
 #endif
+#ifndef OPENSSL_NO_TLS1
 	if (ver == TLS1_VERSION)
 		return(TLSv1_server_method());
-	else if (ver == TLS1_1_VERSION)
+#endif
+	if (ver == TLS1_1_VERSION)
 		return(TLSv1_1_server_method());
 	else if (ver == TLS1_2_VERSION)
 		return(TLSv1_2_server_method());
Index: openssl-1.0.1e/ssl/t1_clnt.c
===================================================================
--- openssl-1.0.1e.orig/ssl/t1_clnt.c	2013-02-11 15:26:04.000000000 +0000
+++ openssl-1.0.1e/ssl/t1_clnt.c	2016-06-13 15:04:58.000000000 +0000
@@ -70,8 +70,10 @@
 		return TLSv1_2_client_method();
 	if (ver == TLS1_1_VERSION)
 		return TLSv1_1_client_method();
+#ifndef OPENSSL_NO_TLS1
 	if (ver == TLS1_VERSION)
 		return TLSv1_client_method();
+#endif
 	return NULL;
 	}
 
@@ -85,8 +87,10 @@
 			ssl3_connect,
 			tls1_get_client_method)
 
+#ifndef OPENSSL_NO_TLS1
 IMPLEMENT_tls_meth_func(TLS1_VERSION, TLSv1_client_method,
 			ssl_undefined_function,
 			ssl3_connect,
 			tls1_get_client_method)
+#endif
 
Index: openssl-1.0.1e/ssl/t1_srvr.c
===================================================================
--- openssl-1.0.1e.orig/ssl/t1_srvr.c	2013-02-11 15:26:04.000000000 +0000
+++ openssl-1.0.1e/ssl/t1_srvr.c	2016-06-13 15:05:06.000000000 +0000
@@ -71,8 +71,10 @@
 		return TLSv1_2_server_method();
 	if (ver == TLS1_1_VERSION)
 		return TLSv1_1_server_method();
+#ifndef OPENSSL_NO_TLS1
 	if (ver == TLS1_VERSION)
 		return TLSv1_server_method();
+#endif
 	return NULL;
 	}
 
@@ -86,8 +88,10 @@
 			ssl_undefined_function,
 			tls1_get_server_method)
 
+#ifndef OPENSSL_NO_TLS1
 IMPLEMENT_tls_meth_func(TLS1_VERSION, TLSv1_server_method,
 			ssl3_accept,
 			ssl_undefined_function,
 			tls1_get_server_method)
+#endif
 
