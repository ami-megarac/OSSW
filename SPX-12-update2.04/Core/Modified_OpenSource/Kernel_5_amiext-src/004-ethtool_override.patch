diff -Naur linux-5.2.8/drivers/net/eth_over.c linux/drivers/net/eth_over.c
--- linux-5.2.8/drivers/net/eth_over.c	1969-12-31 19:00:00.000000000 -0500
+++ linux/drivers/net/eth_over.c	2019-09-09 12:12:19.099782711 -0400
@@ -0,0 +1,44 @@
+#include <linux/init.h>
+#include <linux/etherdevice.h>
+#include <linux/delay.h>
+#include <linux/ethtool.h>
+#include <linux/mii.h>
+
+
+struct ethtool_ops ethtool_override_ops[CONFIG_SPX_FEATURE_GLOBAL_NIC_COUNT];
+#if (CONFIG_SPX_FEATURE_GLOBAL_NIC_COUNT == 2)
+int ethtool_override_eth[CONFIG_SPX_FEATURE_GLOBAL_NIC_COUNT] = { 0, 0};
+#else
+int ethtool_override_eth[CONFIG_SPX_FEATURE_GLOBAL_NIC_COUNT] = { 0 };
+#endif
+
+int
+register_ethtool_override(struct ethtool_ops *ops , int ethindex)
+{
+	if (ethindex >= CONFIG_SPX_FEATURE_GLOBAL_NIC_COUNT)
+		return -1;
+	ethtool_override_ops[ethindex].get_drvinfo 	= ops->get_drvinfo,
+	ethtool_override_ops[ethindex].get_link  	= ops->get_link;
+	ethtool_override_ops[ethindex].nway_reset 	= ops->nway_reset;
+	ethtool_override_ops[ethindex].get_link_ksettings 	= ops->get_link_ksettings;
+	ethtool_override_ops[ethindex].set_link_ksettings 	= ops->set_link_ksettings;
+
+	ethtool_override_eth[ethindex] = 1;
+	return 0;
+}
+
+int
+unregister_ethtool_override(int ethindex)
+{
+	if (ethindex >= CONFIG_SPX_FEATURE_GLOBAL_NIC_COUNT)
+		return -1;
+
+	ethtool_override_eth[ethindex] = 0;
+	return 0;
+}
+
+EXPORT_SYMBOL(register_ethtool_override);
+EXPORT_SYMBOL(unregister_ethtool_override);
+EXPORT_SYMBOL(ethtool_override_eth);
+EXPORT_SYMBOL(ethtool_override_ops);
+
diff -Naur linux-5.2.8/drivers/net/Makefile linux/drivers/net/Makefile
--- linux-5.2.8/drivers/net/Makefile	2019-08-20 12:37:55.000000000 -0400
+++ linux/drivers/net/Makefile	2019-09-09 12:07:29.492228654 -0400
@@ -79,3 +79,7 @@
 obj-$(CONFIG_THUNDERBOLT_NET) += thunderbolt-net.o
 obj-$(CONFIG_NETDEVSIM) += netdevsim/
 obj-$(CONFIG_NET_FAILOVER) += net_failover.o
+
+
+# AMI Extension
+obj-y += eth_over.o
diff -Naur linux-5.2.8/include/linux/eth_over.h linux/include/linux/eth_over.h
--- linux-5.2.8/include/linux/eth_over.h	1969-12-31 19:00:00.000000000 -0500
+++ linux/include/linux/eth_over.h	2019-09-09 11:33:47.594604455 -0400
@@ -0,0 +1,69 @@
+#include <linux/init.h>
+#include <linux/etherdevice.h>
+#include <linux/delay.h>
+#include <linux/ethtool.h>
+#include <linux/mii.h>
+
+extern  struct ethtool_ops ethtool_override_ops[CONFIG_SPX_FEATURE_GLOBAL_NIC_COUNT];
+extern  int ethtool_override_eth[CONFIG_SPX_FEATURE_GLOBAL_NIC_COUNT];
+
+
+# define  ethtool_override_get_drvinfo(index,netdev,info)				\
+{											\
+	if (ethtool_override_eth[index]) 						\
+	{										\
+		if (ethtool_override_ops[index].get_drvinfo != NULL)			\
+		{									\
+			ethtool_override_ops[index].get_drvinfo(netdev,info);		\
+			return;								\
+		}									\
+	}										\
+}											
+
+
+#define ethtool_override_get_settings(index,netdev,cmd)					\
+{											\
+	if (ethtool_override_eth[index]) 						\
+	{										\
+		if (ethtool_override_ops[index].get_settings != NULL)			\
+		{									\
+			return ethtool_override_ops[index].get_settings(netdev,cmd);	\
+		}									\
+	}										\
+}											
+
+
+#define ethtool_override_set_settings(index,netdev,cmd)					\
+{											\
+	if (ethtool_override_eth[index]) 						\
+	{										\
+		if (ethtool_override_ops[index].set_settings != NULL)			\
+		{									\
+			return ethtool_override_ops[index].set_settings(netdev,cmd);	\
+		}									\
+	}										\
+}											
+
+#define ethtool_override_nway_reset(index,netdev)					\
+{											\
+	if (ethtool_override_eth[index]) 						\
+	{										\
+		if (ethtool_override_ops[index].nway_reset != NULL)			\
+		{									\
+			return ethtool_override_ops[index].nway_reset(netdev);		\
+		}									\
+	}										\
+}											
+
+#define ethtool_override_get_link(index,netdev)						\
+{											\
+	if (ethtool_override_eth[index]) 						\
+	{										\
+		if (ethtool_override_ops[index].get_link != NULL)			\
+		{									\
+			return ethtool_override_ops[index].get_link(netdev);		\
+		}									\
+	}										\
+}
+
+
