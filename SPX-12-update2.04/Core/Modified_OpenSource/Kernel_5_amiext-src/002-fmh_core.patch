--- linux-5.2.8/drivers/mtd/parsers/fmhcore.c	2019-08-31 17:22:32.192326503 -0400
+++ linux/drivers/mtd/parsers/fmhcore.c	2019-08-31 17:10:07.297523604 -0400
@@ -0,0 +1,199 @@
+#ifndef __KERNEL__
+# include <stdio.h>
+# include <string.h>
+#else
+# include <linux/kernel.h>
+# include <linux/string.h>
+#endif
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/map.h>
+#include <linux/mtd/partitions.h>
+# include "fmh.h"
+# include "crc32.h"
+
+static unsigned char  CalculateModule100(unsigned char *Buffer, unsigned long Size);
+static unsigned long  CheckForAlternateFMH(ALT_FMH *altfmh);
+static FMH * CheckForNormalFMH(FMH *fmh);
+
+static
+unsigned char 
+CalculateModule100(unsigned char *Buffer, unsigned long Size)
+{
+	unsigned char Sum=0;
+
+	while (Size--)
+	{
+		Sum+=(*Buffer);
+		Buffer++;
+	}	
+
+	return (~Sum)+1;
+}
+
+static
+unsigned char 
+ValidateModule100(unsigned char *Buffer, unsigned long Size)
+{
+	unsigned char Sum=0;
+
+	while (Size--)
+	{
+		Sum+=(*Buffer);
+		Buffer++;
+	}
+
+	return Sum;
+}
+
+static
+FMH *
+CheckForNormalFMH(FMH *fmh)
+{
+	if (strncmp(fmh->FMH_Signature,FMH_SIGNATURE,sizeof(FMH_SIGNATURE)-1) != 0)
+			return NULL;
+
+	if (le16_to_host(fmh->FMH_End_Signature) != FMH_END_SIGNATURE)
+			return NULL;
+
+	if (ValidateModule100((unsigned char *)fmh,sizeof(FMH)) != 0)
+			return NULL;
+	
+	return fmh;
+}
+
+static
+unsigned long 
+CheckForAlternateFMH(ALT_FMH *altfmh)
+{
+	if (strncmp(altfmh->FMH_Signature,FMH_SIGNATURE,sizeof(FMH_SIGNATURE)-1) != 0)
+			return INVALID_FMH_OFFSET;
+
+	if (le16_to_host(altfmh->FMH_End_Signature) != FMH_END_SIGNATURE)
+			return INVALID_FMH_OFFSET;
+
+	if (ValidateModule100((unsigned char *)altfmh,sizeof(ALT_FMH)) != 0)
+			return INVALID_FMH_OFFSET;
+	
+	return le32_to_host(altfmh->FMH_Link_Address);
+}
+
+char g_temp_buff[128]; /*Temorary buffer to hold the FMH Reads */
+
+FMH *
+ScanforFMH(unsigned char *SectorAddr, unsigned long SectorSize,struct mtd_info *ractrends_mtd)
+{
+	FMH *fmh;
+	ALT_FMH *altfmh;
+	unsigned long FMH_Offset;
+	size_t retlen;
+	int retval = 0;
+
+	retlen = 128;
+
+	retval = ractrends_mtd->_read(ractrends_mtd,(unsigned long)SectorAddr,sizeof(FMH),&retlen,g_temp_buff);
+	//validate
+	
+	/* Check if Normal FMH is found */
+	fmh = (FMH *)g_temp_buff;
+	fmh = CheckForNormalFMH(fmh);
+	if (fmh != NULL)
+		return fmh;
+
+	/* If Normal FMH is not found, check for alternate FMH */
+	retlen = 128;
+	retval = ractrends_mtd->_read(ractrends_mtd,(unsigned long)SectorAddr+SectorSize-sizeof(ALT_FMH),sizeof(ALT_FMH),&retlen,g_temp_buff);
+	//validate
+	
+
+	altfmh = (ALT_FMH *)g_temp_buff;
+	FMH_Offset = CheckForAlternateFMH(altfmh);
+	if (FMH_Offset == INVALID_FMH_OFFSET)
+		return NULL;
+
+	retlen = 128;		
+	retval = ractrends_mtd->_read(ractrends_mtd,(unsigned long)SectorAddr+FMH_Offset,sizeof(FMH),&retlen,g_temp_buff);
+	//validate
+	
+	fmh = (FMH*)g_temp_buff;
+	
+	/* If alternate FMH is found, validate it */
+	fmh = CheckForNormalFMH(fmh);
+	return fmh;
+}
+
+void
+CreateFMH(FMH *fmh,unsigned long AllocatedSize, MODULE_INFO *mod)
+{
+	/* Clear the Structure */	
+	memset((void *)fmh,0,sizeof(FMH));
+
+	/* Copy the module information */
+	memcpy((void *)&(fmh->Module_Info),(void *)mod,sizeof(MODULE_INFO));
+					
+	/* Fill the FMH Fields */		
+	strncpy(fmh->FMH_Signature,FMH_SIGNATURE,sizeof(FMH_SIGNATURE)-1);
+	fmh->FMH_Ver_Major 		= FMH_MAJOR;
+	fmh->FMH_Ver_Minor 		= FMH_MINOR;
+	fmh->FMH_Size	   		= FMH_SIZE;
+	fmh->FMH_End_Signature	= host_to_le16(FMH_END_SIGNATURE);
+	
+	fmh->FMH_AllocatedSize	= host_to_le32(AllocatedSize);
+
+	/*Calculate Header Checksum*/
+	fmh->FMH_Header_Checksum = CalculateModule100((unsigned char *)fmh,sizeof(FMH));
+		
+	return;
+}
+
+void
+CreateAlternateFMH(ALT_FMH *altfmh,unsigned long FMH_Offset) 
+{
+	/* Clear the Structure */	
+	memset((void *)altfmh,0,sizeof(ALT_FMH));
+					
+	/* Fill the FMH Fields */		
+	strncpy(altfmh->FMH_Signature,FMH_SIGNATURE,sizeof(FMH_SIGNATURE)-1);
+	altfmh->FMH_End_Signature	= host_to_le16(FMH_END_SIGNATURE);
+	
+	altfmh->FMH_Link_Address	= host_to_le32(FMH_Offset);
+
+	/*Calculate Header Checksum*/
+	altfmh->FMH_Header_Checksum = CalculateModule100((unsigned char *)altfmh, sizeof(ALT_FMH));
+	return;
+}
+
+
+
+unsigned long
+CalculateCRC32(unsigned char *Buffer, unsigned long Size)
+{
+	unsigned long i,crc32 = 0xFFFFFFFF;
+
+	/* Read the data and calculate crc32 */	
+	for(i = 0; i < Size; i++)
+		crc32 = ((crc32) >> 8) ^ CrcLookUpTable[(Buffer[i]) 
+			^ ((crc32) & 0x000000FF)];
+	return ~crc32;
+}
+
+void
+BeginCRC32(unsigned long *crc32)
+{
+	*crc32 = 0xFFFFFFFF;
+	return;
+}
+
+void
+DoCRC32(unsigned long *crc32, unsigned char Data)
+{
+	*crc32=((*crc32) >> 8) ^ CrcLookUpTable[Data ^ ((*crc32) & 0x000000FF)];
+	return;
+}
+
+void
+EndCRC32(unsigned long *crc32)
+{
+	*crc32 = ~(*crc32);
+	return;
+}
+
--- linux-5.2.8/drivers/mtd/parsers/fmh.h	2019-08-31 17:22:37.532346559 -0400
+++ linux/drivers/mtd/parsers/fmh.h	2019-08-31 17:10:15.313553855 -0400
@@ -0,0 +1,141 @@
+#ifndef __AMI_FMH_H__
+#define __AMI_FMH_H__
+
+typedef unsigned long UINT32;
+typedef long INT32;
+
+#define FMH_SIGNATURE			"$MODULE$"
+#define FMH_END_SIGNATURE 		0x55AA
+#define FMH_SIZE				64
+#define FMH_MAJOR				1
+#define FMH_MINOR		 		8
+
+/*
+typedef struct
+{
+	unsigned short BootPathID:3;
+	unsigned short CopyToRAM:1;
+	unsigned short Execute:1;	
+	unsigned short Compress:3;
+	unsigned short ValidChecksum:1;
+	unsigned short Reserved:7;
+} __attribute__ ((packed)) MODULE_FLAGS;
+*/
+
+/* Module Information Structure */
+typedef struct
+{
+	unsigned char 	Module_Name[8];
+	unsigned char  	Module_Ver_Major;
+	unsigned char  	Module_Ver_Minor;
+	unsigned short	Module_Type;			/* Refer Module Type Values Below */
+	UINT32			Module_Location;		/* Offset to Module from start */
+	UINT32			Module_Size;
+	unsigned short	Module_Flags;			/* Refer Module Flags Values Below */
+	UINT32			Module_Load_Address;
+	UINT32	 		Module_Checksum;		/* CRC 32 */
+	unsigned char  	Module_Ver_Aux[6];
+	unsigned char	Module_Reserved[2];
+} __attribute__ ((packed)) MODULE_INFO;
+
+/* Flash Module Header */
+typedef struct
+{
+	unsigned char 	FMH_Signature[8];		/* "$MODULE$" */
+	unsigned char 	FMH_Ver_Major;			/* 1 */	
+	unsigned char 	FMH_Ver_Minor;			/* 8 */
+	unsigned short	FMH_Size;				/* 64 */
+	UINT32	 		FMH_AllocatedSize;
+	UINT32			FMH_Location;
+	unsigned char	FMH_Reserved[3];
+	unsigned char	FMH_Header_Checksum;		/* Modulo 100 */
+	MODULE_INFO	Module_Info;
+	unsigned short 	FMH_End_Signature;		/* 0x55AA */	
+} __attribute__ ((packed)) FMH;
+
+/* Alternate FMH Location - At the end of first erase block */
+typedef struct
+{
+	unsigned short 	FMH_End_Signature;		/* 0x55AA */
+	unsigned char  	FMH_Header_Checksum;	/* Modulo 100 */
+	unsigned char  	FMH_Reserved;
+	UINT32			FMH_Link_Address;		/* Actual FMH offset from erase blk start*/
+	unsigned char  	FMH_Signature[8];		/* "$MODULE$" */
+} __attribute__ ((packed)) ALT_FMH;
+
+
+/*Values for FMH_Link_Address*/
+#define INVALID_FMH_OFFSET 0xFFFFFFFF
+
+
+/* Values for LSB of Module Type */
+#define MODULE_UNKNOWN			0x00	/* Unknown Module Type  */	/* All */
+#define MODULE_BOOTLOADER		0x01	/* Boot Loader 		*/	/* All */	
+#define MODULE_FMH_FIRMWARE		0x02  	/* Info about  firmware */	/* All */	
+#define MODULE_KERNEL			0x03	/* OS Kernel 		*/	/* All */	
+#define MODULE_FPGA				0x04	/* FPGA Microcode 	*/	/* All */		
+#define MODULE_ELF				0x05	/* ELF Executable Image */	/* All */
+#define MODULE_PIMAGE			0x06	/* U-Boot Linux Image 	*/	/* < 1.4  */
+#define MODULE_INITRD_CRAMFS    0x07  	/* Initrd image of cramfs*/	/* < 1.4  */
+#define MODULE_LINUX_KERNEL		0x08	/* Linux Kernel Image 	 */     /* >= 1.4 */
+#define MODULE_LINUX_ROOTFS		0x09	/* Linux Root FileSystem */  	/* >= 1.4 */
+#define MODULE_JFFS				0x10	/* JFFS File System 	 */	/* < 1.3  */
+#define MODULE_JFFS2			0x11	/* JFFS2 File System 	 */	/* < 1.3  */
+#define MODULE_CRAMFS			0x12	/* CRAMFS */
+#define MODULE_JFFS_CONFIG		0x20					/* 1.3 Only */
+#define MODULE_JFFS2_CONFIG		0x21					/* 1.3 Only */
+#define MODULE_CONFIG			0x30	/* Configuration */ 		/* >= 1.4 */
+#define MODULE_WEB				0x40	/* Web pages 	 */		/* >= 1.4 */
+#define MODULE_PDK				0x50	/* PDK 	 */			/* >= 1.4 */
+#define MODULE_SQUASHFS			0x60
+#define MODULE_INITRD_SQUASHFS    0x61  	/* Initrd image of Squasfs */
+#define MODULE_CACHE			0x70	/* Cache contents */		/* >= 1.8 */
+
+/* Values for MSBof Module Type = Module Format */
+#define MODULE_FORMAT_BACKWARD		0x00	/* Set for Backward comaptible till 1.3 */
+#define MODULE_FORMAT_BINARY		0x01
+#define MODULE_FORMAT_FIRMWARE_INFO	0x02
+#define MODULE_FORMAT_UBOOT_WRAP	0x03
+#define MODULE_FORMAT_ELF			0x04
+#define MODULE_FORMAT_CRAMFS		0x10
+#define MODULE_FORMAT_JFFS			0x11
+#define MODULE_FORMAT_JFFS2			0x12
+#define MODULE_FORMAT_INITRD		0x80
+#define MODULE_FORMAT_SQUASHFS		0x60
+#define MODULE_FORMAT_INITRD_SQUASHFS 0x61  	/* Initrd image of Squasfs */
+
+#define MODULE_FIRMWARE_1_4	((MODULE_FORMAT_FIRMWARE_INFO << 8) | (MODULE_FMH_FIRMWARE))
+
+/* Values for Module Flags */
+#define MODULE_FLAG_BOOTPATH_OS			0x0001
+#define MODULE_FLAG_BOOTPATH_DIAG		0x0002
+#define MODULE_FLAG_BOOTPATH_RECOVERY	0x0004
+#define MODULE_FLAG_COPY_TO_RAM			0x0008
+#define MODULE_FLAG_EXECUTE				0x0010
+#define MODULE_FLAG_COMPRESSION_MASK	0x00E0  /* Refer Compression Type values */
+#define MODULE_FLAG_COMPRESSION_LSHIFT	5
+#define MODULE_FLAG_VALID_CHECKSUM		0x0100	/* Validate Checksum if this is set */
+
+/* Values for Compression */
+#define MODULE_COMPRESSION_NONE			0x00
+#define MODULE_COMPRESSION_MINILZO_1X	0x01
+#define MODULE_COMPRESSION_GZIP			0x02
+
+#include <asm/byteorder.h>
+#define host_to_le16(x)	__cpu_to_le16((x))
+#define host_to_le32(x)	__cpu_to_le32((x))
+#define le16_to_host(x)	__le16_to_cpu((x))
+#define le32_to_host(x)	__le32_to_cpu((x))
+
+/* Function Prototypes */
+FMH* 	ScanforFMH(unsigned char *SectorAddr, UINT32 SectorSize,struct mtd_info* ractrends_mtd);
+//FMH* 	ScanforFMH(unsigned char *SectorAddr, UINT32 SectorSize);
+void	CreateFMH(FMH *fmh,UINT32 AllocatedSize, MODULE_INFO *mod);
+void 	CreateAlternateFMH(ALT_FMH *altfmh,UINT32 FMH_Offset); 
+
+/* CRC32 Related */
+UINT32 CalculateCRC32(unsigned char *Buffer, UINT32 Size);
+void BeginCRC32(UINT32 *crc32);
+void DoCRC32(UINT32 *crc32, unsigned char Data);
+void EndCRC32(UINT32 *crc32);
+#endif	
diff -Naur linux-5.2.8/drivers/mtd/parsers/crc32.h linux/drivers/mtd/parsers/crc32.h
--- linux-5.2.8/drivers/mtd/parsers/crc32.h	1969-12-31 19:00:00.000000000 -0500
+++ linux/drivers/mtd/parsers/crc32.h	2019-09-03 08:42:37.783521376 -0400
@@ -0,0 +1,74 @@
+#ifndef AMI_CRC32_H
+#define AMI_CRC32_H
+unsigned long  CrcLookUpTable[256] =
+{
+	0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,
+	0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
+	0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,
+	0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
+	0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
+	0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
+	0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
+	0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
+	0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
+	0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
+	0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,
+	0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
+	0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,
+	0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
+	0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
+	0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
+
+	0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,
+	0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
+	0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,
+	0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
+	0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
+	0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
+	0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,
+	0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
+	0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
+	0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
+	0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,
+	0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
+	0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,
+	0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
+	0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,
+	0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
+
+	0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,
+	0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
+	0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
+	0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
+	0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,
+	0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
+	0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
+	0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
+	0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,
+	0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
+	0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,
+	0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
+	0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
+	0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
+	0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,
+	0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
+
+	0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
+	0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
+	0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,
+	0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
+	0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,
+	0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
+	0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
+	0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
+	0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,
+	0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
+	0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,
+	0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
+	0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,
+	0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
+	0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
+	0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D,
+};
+
+#endif
