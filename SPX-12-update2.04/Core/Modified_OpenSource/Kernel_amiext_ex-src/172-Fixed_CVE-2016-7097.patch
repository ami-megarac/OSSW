diff -Naur linux_org/fs/ext2/acl.c linux/fs/ext2/acl.c
--- linux_org/fs/ext2/acl.c	2019-03-28 11:19:01.084614331 +0800
+++ linux/fs/ext2/acl.c	2019-03-28 11:27:06.522091096 +0800
@@ -194,15 +194,11 @@
 		case ACL_TYPE_ACCESS:
 			name_index = EXT2_XATTR_INDEX_POSIX_ACL_ACCESS;
 			if (acl) {
-				error = posix_acl_equiv_mode(acl, &inode->i_mode);
-				if (error < 0)
+				error = posix_acl_update_mode(inode, &inode->i_mode, &acl);
+				if (error)
 					return error;
-				else {
-					inode->i_ctime = CURRENT_TIME_SEC;
-					mark_inode_dirty(inode);
-					if (error == 0)
-						acl = NULL;
-				}
+				inode->i_ctime = CURRENT_TIME_SEC;
+				mark_inode_dirty(inode);
 			}
 			break;
 
diff -Naur linux_org/fs/ext3/acl.c linux/fs/ext3/acl.c
--- linux_org/fs/ext3/acl.c	2019-03-28 11:19:06.652333443 +0800
+++ linux/fs/ext3/acl.c	2019-03-28 11:27:48.542325443 +0800
@@ -195,15 +195,11 @@
 		case ACL_TYPE_ACCESS:
 			name_index = EXT3_XATTR_INDEX_POSIX_ACL_ACCESS;
 			if (acl) {
-				error = posix_acl_equiv_mode(acl, &inode->i_mode);
-				if (error < 0)
+				error = posix_acl_update_mode(inode, &inode->i_mode, &acl);
+				if (error)
 					return error;
-				else {
-					inode->i_ctime = CURRENT_TIME_SEC;
-					ext3_mark_inode_dirty(handle, inode);
-					if (error == 0)
-						acl = NULL;
-				}
+				inode->i_ctime = CURRENT_TIME_SEC;
+				ext3_mark_inode_dirty(handle, inode);
 			}
 			break;
 
diff -Naur linux_org/fs/ext4/acl.c linux/fs/ext4/acl.c
--- linux_org/fs/ext4/acl.c	2019-03-28 11:19:11.392094324 +0800
+++ linux/fs/ext4/acl.c	2019-03-28 11:28:25.395811424 +0800
@@ -201,15 +201,11 @@
 	case ACL_TYPE_ACCESS:
 		name_index = EXT4_XATTR_INDEX_POSIX_ACL_ACCESS;
 		if (acl) {
-			error = posix_acl_equiv_mode(acl, &inode->i_mode);
-			if (error < 0)
+			error = posix_acl_update_mode(inode, &inode->i_mode, &acl);
+			if (error)
 				return error;
-			else {
-				inode->i_ctime = ext4_current_time(inode);
-				ext4_mark_inode_dirty(handle, inode);
-				if (error == 0)
-					acl = NULL;
-			}
+			inode->i_ctime = ext4_current_time(inode);
+			ext4_mark_inode_dirty(handle, inode);
 		}
 		break;
 
diff -Naur linux_org/fs/jffs2/acl.c linux/fs/jffs2/acl.c
--- linux_org/fs/jffs2/acl.c	2019-03-28 11:19:16.763823324 +0800
+++ linux/fs/jffs2/acl.c	2019-03-28 11:29:21.523520590 +0800
@@ -236,9 +236,10 @@
 	case ACL_TYPE_ACCESS:
 		xprefix = JFFS2_XPREFIX_ACL_ACCESS;
 		if (acl) {
-			umode_t mode = inode->i_mode;
-			rc = posix_acl_equiv_mode(acl, &mode);
-			if (rc < 0)
+			umode_t mode;
+
+			rc = posix_acl_update_mode(inode, &mode, &acl);
+			if (rc)
 				return rc;
 			if (inode->i_mode != mode) {
 				struct iattr attr;
@@ -250,8 +251,6 @@
 				if (rc < 0)
 					return rc;
 			}
-			if (rc == 0)
-				acl = NULL;
 		}
 		break;
 	case ACL_TYPE_DEFAULT:
diff -Naur linux_org/fs/posix_acl.c linux/fs/posix_acl.c
--- linux_org/fs/posix_acl.c	2019-03-28 11:19:21.583580168 +0800
+++ linux/fs/posix_acl.c	2019-03-28 11:29:58.004191979 +0800
@@ -497,6 +497,37 @@
 }
 EXPORT_SYMBOL(__posix_acl_create);
 
+/**
+ * posix_acl_update_mode  -  update mode in set_acl
+ *
+ * Update the file mode when setting an ACL: compute the new file permission
+ * bits based on the ACL.  In addition, if the ACL is equivalent to the new
+ * file mode, set *acl to NULL to indicate that no ACL should be set.
+ *
+ * As with chmod, clear the setgit bit if the caller is not in the owning group
+ * or capable of CAP_FSETID (see inode_change_ok).
+ *
+ * Called from set_acl inode operations.
+ */
+int posix_acl_update_mode(struct inode *inode, umode_t *mode_p,
+			  struct posix_acl **acl)
+{
+	umode_t mode = inode->i_mode;
+	int error;
+
+	error = posix_acl_equiv_mode(*acl, &mode);
+	if (error < 0)
+		return error;
+	if (error == 0)
+		*acl = NULL;
+	if (!in_group_p(inode->i_gid) &&
+	    !capable_wrt_inode_uidgid(inode, CAP_FSETID))
+		mode &= ~S_ISGID;
+	*mode_p = mode;
+	return 0;
+}
+EXPORT_SYMBOL(posix_acl_update_mode);
+
 int
 __posix_acl_chmod(struct posix_acl **acl, gfp_t gfp, umode_t mode)
 {
diff -Naur linux_org/include/linux/posix_acl.h linux/include/linux/posix_acl.h
--- linux_org/include/linux/posix_acl.h	2019-03-28 11:19:26.631325514 +0800
+++ linux/include/linux/posix_acl.h	2019-03-28 11:30:19.623480188 +0800
@@ -87,6 +87,7 @@
 extern int posix_acl_equiv_mode(const struct posix_acl *, umode_t *);
 extern int __posix_acl_create(struct posix_acl **, gfp_t, umode_t *);
 extern int __posix_acl_chmod(struct posix_acl **, gfp_t, umode_t);
+extern int posix_acl_update_mode(struct inode *, umode_t *, struct posix_acl **);
 
 extern struct posix_acl *get_posix_acl(struct inode *, int);
 extern int set_posix_acl(struct inode *, int, struct posix_acl *);
