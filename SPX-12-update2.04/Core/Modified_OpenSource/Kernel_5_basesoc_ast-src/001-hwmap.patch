This patch provides the AST SoC hardware device address values  and phys2virt mapping values

This should be used only for the legacy drivers which  does not use device tree.
This patch should be removed when all drivers uses device tree.


diff -Naur linux-5.2.8/arch/arm/include/mach/hardware.h linux/arch/arm/include/mach/hardware.h
--- linux-5.2.8/arch/arm/include/mach/hardware.h	1969-12-31 19:00:00.000000000 -0500
+++ linux/arch/arm/include/mach/hardware.h	2019-09-03 14:28:46.699977832 -0400
@@ -0,0 +1,47 @@
+/*
+ *  linux/include/asm-arm/arch-ast3100evb/hardware.h
+ *
+ *  This file contains the hardware definitions of the AST 2000 EVB
+ *
+ *  Copyright (C) 1999 ARM Limited.
+ *  Copyright (C) 2005 American Megatrends Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+#ifndef __ASM_ARCH_HARDWARE_H
+#define __ASM_ARCH_HARDWARE_H
+
+//#include <asm/sizes.h>
+
+/*****************************************************************
+							IO Mapping
+ All registers (128MB) and flash (max 128MB) should fit within
+ 256MB @ 0xF0000000
+ Mem address Range
+		 Virt = 0xF0000000 to 0xFFFFFFFF
+	     Phys = 0x10000000 to 0x1FFFFFFF
+ IO address Range
+		 Virt = 0xF7000000 to 0xFEFFFFFF
+         Phys = 0x16000000 to 0x1EFFFFFF
+*****************************************************************/
+#define IO_BASE			0xF0000000                 // VA of IO
+#define MEM_ADDRESS(x)  ((x&0x00ffffff)+IO_BASE)
+#define IO_ADDRESS(x)   ((x&0x0fffffff)+IO_BASE)
+#define PHY_ADDRESS(x)  ((x&0x0fffffff)+0x10000000)
+
+#define PCIMEM_SIZE		0x01000000
+#define PCIMEM_BASE		0xf0000000
+
+#endif
diff -Naur linux-5.2.8/arch/arm/include/mach/hwdef.h linux/arch/arm/include/mach/hwdef.h
--- linux-5.2.8/arch/arm/include/mach/hwdef.h	1969-12-31 19:00:00.000000000 -0500
+++ linux/arch/arm/include/mach/hwdef.h	2019-09-03 13:57:55.944983142 -0400
@@ -0,0 +1,198 @@
+/*
+ *  This file contains the AST SOC Register definitions
+ *
+ *  Copyright (C) 2005 American Megatrends Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef     _HWDEF_ASTCOMMON_H
+#define     _HWDEF_ASTCOMMON_H_
+
+
+/* -----------------------------------------------------------------
+ *                  SRAM Registers
+ * -----------------------------------------------------------------
+ */
+
+
+/*
+ * -------------------------------------------------------------
+ *                     SDRAM Registers
+ * -------------------------------------------------------------
+ */
+
+
+/*--------------------------------------------------------
+ *  Timer definitions
+ * ------------------------------------------------------
+ */
+/* Timer conrol reg */
+#define TIMER3_INTR_ENABLE		0x400
+#define TIMER3_CLOCK_SELECT		0x200
+#define TIMER3_ENABLE			0x100
+#define TIMER2_INTR_ENABLE		0x040
+#define TIMER2_CLOCK_SELECT		0x020
+#define TIMER2_ENABLE			0x010
+#define TIMER1_INTR_ENABLE		0x004
+#define TIMER1_CLOCK_SELECT		0x002
+#define TIMER1_ENABLE			0x001
+
+
+/* --------------------------------------------------------
+ *  Interrupt Controllers
+ * --------------------------------------------------------
+ */
+#define IRQ_VIC2			IRQ_GPIO
+#define IRQMASK_VIC2			IRQMASK_GPIO
+
+/*
+ * VIC Register (VA)
+ */
+#define VIC_IRQ_ENABLE_VA				IRQ_ENABLE_REG
+#define VIC_IRQ_DISABLE_VA				IRQ_DISABLE_REG
+#define VIC_SOFT_INT_CLEAR_VA			SOFT_INT_CLEAR_REG
+
+#define VIC_SENSE_VA                   INTERRUPT_SENS_REG
+#define VIC_EVENT_VA                   INTERRUPT_EVENT_REG
+#define VIC_EDGE_CLEAR_VA              EDGE_TRIGGERED_INTCLEAR_REG
+
+#define EXT_VIC_SENSE_VA               EXT_INTERRUPT_SENS_REG
+#define EXT_VIC_EVENT_VA               EXT_INTERRUPT_EVENT_REG
+#define EXT_VIC_EDGE_CLEAR_VA          EXT_EDGE_TRIGGERED_INTCLEAR_REG
+
+#define IRQ_ENABLE(irq_no)             *((volatile unsigned long*)VIC_IRQ_ENABLE_VA)    |= 1 << (irq_no)
+#define IRQ_DISABLE(irq_no)            *((volatile unsigned long*)VIC_IRQ_DISABLE_VA)   |= 1 << (irq_no)
+#define IRQ_SOFT_INT_CLEAR(irq_no)     *((volatile unsigned long*)VIC_SOFT_INT_CLEAR_VA)|= 1 << (irq_no)
+
+#define IRQ_SET_LEVEL_TRIGGER(irq_no)   *((volatile unsigned long*)VIC_SENSE_VA) |= 1 << (irq_no)
+#define IRQ_SET_EDGE_TRIGGER(irq_no)    *((volatile unsigned long*)VIC_SENSE_VA) &= ~(1 << (irq_no))
+#define IRQ_SET_RISING_EDGE(irq_no)     *((volatile unsigned long*)VIC_EVENT_VA) |= 1 << (irq_no)
+#define IRQ_SET_FALLING_EDGE(irq_no)    *((volatile unsigned long*)VIC_EVENT_VA) &= ~(1 << (irq_no))
+#define IRQ_SET_HIGH_LEVEL(irq_no)      *((volatile unsigned long*)VIC_EVENT_VA) |= 1 << (irq_no)
+#define IRQ_SET_LOW_LEVEL(irq_no)       *((volatile unsigned long*)VIC_EVENT_VA) &= ~(1 << (irq_no))
+#define IRQ_EDGE_CLEAR(irq_no)          *((volatile unsigned long*)VIC_EDGE_CLEAR_VA) |= 1 << (irq_no)
+
+#define EXT_IRQ_SET_LEVEL_TRIGGER(irq_no)   *((volatile unsigned long*)EXT_VIC_SENSE_VA) |= 1 << (irq_no - BW_CMP_NR_IRQS)
+#define EXT_IRQ_SET_EDGE_TRIGGER(irq_no)    *((volatile unsigned long*)EXT_VIC_SENSE_VA) &= ~(1 << (irq_no - BW_CMP_NR_IRQS))
+#define EXT_IRQ_SET_RISING_EDGE(irq_no)     *((volatile unsigned long*)EXT_VIC_EVENT_VA) |= 1 << (irq_no - BW_CMP_NR_IRQS)
+#define EXT_IRQ_SET_FALLING_EDGE(irq_no)    *((volatile unsigned long*)EXT_VIC_EVENT_VA) &= ~(1 << (irq_no - BW_CMP_NR_IRQS))
+#define EXT_IRQ_SET_HIGH_LEVEL(irq_no)      *((volatile unsigned long*)EXT_VIC_EVENT_VA) |= 1 << (irq_no - BW_CMP_NR_IRQS)
+#define EXT_IRQ_SET_LOW_LEVEL(irq_no)       *((volatile unsigned long*)EXT_VIC_EVENT_VA) &= ~(1 << (irq_no - BW_CMP_NR_IRQS))
+#define EXT_IRQ_EDGE_CLEAR(irq_no)          *((volatile unsigned long*)EXT_VIC_EDGE_CLEAR_VA) |= 1 << (irq_no - BW_CMP_NR_IRQS)
+
+#define VIC2_SENSE_VA                   VIC2_SENSE
+#define VIC2_EVENT_VA                   VIC2_EVENT
+#define VIC2_EDGE_CLEAR_VA              VIC2_EDGE_CLEAR
+
+#define VIC2_IRQ_SET_LEVEL_TRIGGER(irq_no)     *((volatile unsigned long*)VIC2_SENSE_VA) |= 1 << (irq_no - VIC2_IRQ_SHIFT)
+#define VIC2_IRQ_SET_EDGE_TRIGGER(irq_no)      *((volatile unsigned long*)VIC2_SENSE_VA) &= ~(1 << (irq_no - VIC2_IRQ_SHIFT))
+#define VIC2_IRQ_SET_RISING_EDGE(irq_no)       *((volatile unsigned long*)VIC2_EVENT_VA) |= 1 << (irq_no - VIC2_IRQ_SHIFT)
+#define VIC2_IRQ_SET_FALLING_EDGE(irq_no)      *((volatile unsigned long*)VIC2_EVENT_VA) &= ~(1 << (irq_no - VIC2_IRQ_SHIFT))
+#define VIC2_IRQ_SET_HIGH_LEVEL(irq_no)        *((volatile unsigned long*)VIC2_EVENT_VA) |= 1 << (irq_no - VIC2_IRQ_SHIFT)
+#define VIC2_IRQ_SET_LOW_LEVEL(irq_no)         *((volatile unsigned long*)VIC2_EVENT_VA) &= ~(1 << (irq_no - VIC2_IRQ_SHIFT))
+#define VIC2_IRQ_EDGE_CLEAR(irq_no)            *((volatile unsigned long*)VIC_EDGE_CLEAR_VA) |= 1 << (irq_no - VIC2_IRQ_SHIFT)
+
+
+/*  --------------------------------------------------------------
+ *   I2S Controllers
+ *  --------------------------------------------------------------
+ */
+
+
+/*  --------------------------------------------------------------
+ *   SSP Controllers
+ *  --------------------------------------------------------------
+ */
+
+
+/*  --------------------------------------------------------------
+ *   I2C Controllers
+ *  --------------------------------------------------------------
+ */
+
+
+/*----------------------------------------------------------------
+ *   DMA Controllers
+ *----------------------------------------------------------------
+ */
+
+
+/*----------------------------------------------------------------
+ *   Serial  Controllers
+ *----------------------------------------------------------------
+ */
+#define AST_UART_CLOCK     UART_CLOCK/13 /* defined in board config */
+#define AST_BAUD_115200    (AST_UART_CLOCK /1843200)
+#define AST_BAUD_57600     (AST_UART_CLOCK /921600)
+#define AST_BAUD_38400     (AST_UART_CLOCK /614400)
+#define AST_BAUD_19200     (AST_UART_CLOCK /307200)
+#define AST_BAUD_14400     (AST_UART_CLOCK /230400)
+#define AST_BAUD_9600      (AST_UART_CLOCK /153600)
+
+
+/*----------------------------------------------------------------
+ *   UART DMA Controllers
+ *----------------------------------------------------------------
+ */
+#define	UART_TX_UDMA_EN					0x00
+#define	UART_RX_UDMA_EN					0x04
+#define	UART_UDMA_CONF					0x08
+#define	UART_UDMA_TIMER					0x0C
+
+#define	UART_TX_UDMA_REST				0x20
+#define	UART_RX_UDMA_REST				0x24
+
+#define	UART_TX_UDMA_IER				0x30
+#define	UART_TX_UDMA_ISR				0x34
+#define	UART_RX_UDMA_IER				0x38
+#define	UART_RX_UDMA_ISR				0x3C
+#define	UART_TX_R_POINT(x)				(0x40 + (x*0x20))
+#define	UART_TX_W_POINT(x)				(0x44 + (x*0x20))
+#define	UART_TX_UDMA_ADDR(x)			(0x48 + (x*0x20))
+#define	UART_RX_R_POINT(x)				(0x50 + (x*0x20))
+#define	UART_RX_W_POINT(x)				(0x54 + (x*0x20))
+#define	UART_RX_UDMA_ADDR(x)			(0x58 + (x*0x20))
+
+/* UART_TX_UDMA_EN	-0x00 : UART TX DMA Enable */
+/* UART_RX_UDMA_EN	-0x04 : UART RX DMA Enable */
+#define UDMA_CH_EN(x)					(0x1 << (x))
+
+/* UART_UDMA_CONF - 0x08 : Misc, Buffer size  */
+#define UDMA_TX_BUFF_SIZE_MASK			(0x3)
+#define UDMA_SET_TX_BUFF_SIZE(x)		(x)
+#define UDMA_BUFF_SIZE_1KB				(0x0)
+#define UDMA_BUFF_SIZE_4KB				(0x1)
+#define UDMA_BUFF_SIZE_16KB				(0x2)
+#define UDMA_BUFF_SIZE_64KB				(0x3)
+#define UDMA_RX_BUFF_SIZE_MASK			(0x3 << 2)
+#define UDMA_SET_RX_BUFF_SIZE(x)		(x << 2)
+#define UDMA_TIMEOUT_DIS				(0x1 << 4)
+
+/*----------------------------------------------------------------
+ *   RTC
+ *----------------------------------------------------------------
+ */
+
+
+/*----------------------------------------------------------------
+ *   WDT
+ *----------------------------------------------------------------
+ */
+#define WDT_TIMER_EN       0x01
+#define WDT_RESET_EN       0x02
+
+
+#endif /* _HWDEF_AST2400_H_ */
diff -Naur linux-5.2.8/arch/arm/include/mach/hwmap.h linux/arch/arm/include/mach/hwmap.h
--- linux-5.2.8/arch/arm/include/mach/hwmap.h	1969-12-31 19:00:00.000000000 -0500
+++ linux/arch/arm/include/mach/hwmap.h	2019-09-03 13:57:55.944983142 -0400
@@ -0,0 +1,551 @@
+/*
+ *  This file contains the AST SOC Register Base, IRQ and DMA  mappings
+ *
+ *  Copyright (C) 2005 American Megatrends Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef     _HWREG_ASTCOMMON_H_
+#define     _HWMAP_ASTCOMMON_H_
+
+
+/********************************************************************
+   Internal Register Mapping Actual = 0x1E600000 to 0x1E78CFFF
+   After Align the base and size    = 0x16000000 to 0x1EFFFFFF
+*********************************************************************/
+
+#define AST_REGISTER_BASE              0x14000000
+#define AST_REGISTER_SIZE              0x0A800000
+
+/*--------------------------- Individual Devices ------------------------- */
+#define AST_SPI_FLASH_BASE             CONFIG_SPX_FEATURE_GLOBAL_FLASH_START
+#define AST_SMC_BASE                   0x16000000
+#define AST_AHBC_BASE                  0x1E600000
+#define AST_FMC_BASE                   0x1E620000
+#define AST_SPI_BASE                   0X1e630000
+#define AST_MIC_BASE                   0x1E640000
+#define AST_MAC1_BASE                  0x1E660000
+#define AST_MAC2_BASE                  0x1E680000
+#define AST_MAC3_BASE                  0x1E670000    /* ???? */
+#define AST_MAC4_BASE                  0x1E690000	 /* ???? */
+#define AST_USB20_BASE                 0x1E6A0000
+#if defined(CONFIG_SOC_AST3200) || defined(CONFIG_SOC_AST2500) || defined(CONFIG_SOC_AST2530)
+#define AST_USB20_1_BASE               0x1E6A1000	/* Only in AST3200 and maybe in AST2500 too */
+#define AST_USB20_2_BASE               0x1E6A3000	/* Only in AST3200 and maybe in AST2500 too */
+#endif
+#define AST_USB11_BASE                 0x1E6B0000
+#define AST_IC_BASE                    0x1E6C0000
+#define AST_SDRAMC_BASE                0x1E6E0000
+#define AST_USB1_BASE                  0x1E6E1000	 /* Not in AST3100 */
+#define AST_SCU_BASE                   0x1E6E2000
+#define AST_CRYPTO_BASE                0x1E6E3000  
+#define AST_JTAG_BASE                  0x1E6E4000 
+#define AST_GRAPHIC_BASE               0x1E6E6000
+#define AST_DMA_BASE                   0x1E6E7000	 /* Not in AST3100 */
+#define AST_MCTP_BASE                  0x1E6E8000    /* Not in AST3100 */
+#define AST_ADC_BASE                   0x1E6E9000
+#define AST_PS2_BASE                   0x1E6EA000    /* AST3100 Specific */
+#define AST_RFX_BASE                   0x1E6EB000    /* AST3100 Specific */
+#define AST_LPC_PLUS_BASE              0x1E6EC000	 /* Not in AST3100   */
+#if defined(CONFIG_SOC_AST3200) || defined(CONFIG_SOC_AST2500) || defined(CONFIG_SOC_AST2530)
+#define AST_PCIE_BASE                  0x1E6ED000
+#define AST_P2X_BASE                   0x1E6F0000	/* P2X Bridge  */
+#define AST_PCIE_WIN_BASE              0x70000000	/* PCIe Host Bus Bridge */
+#define AST_PCIE_WIN_SIZE              0x10000000
+#else
+#define AST_PCI_MASTER1_BASE           0x60000000    /* Not in AST3200   */
+#define AST_PCI_MASTER2_BASE           0x80000000    /* Not in AST3200   */
+#endif
+#define AST_VIDEO_BASE                 0x1E700000	 /* Not in AST3100   */  
+#define AST_AHB_TO_PBUS_BASE           0x1E720000	 /* SRAM */ 	
+#define AST_MDMA_BASE                  0x1E740000	 /* SD/MMC controller */
+#define AST_2D_BASE                    0x1E760000
+#define AST_GPIO_BASE                  0x1E780000
+#define AST_RTC_BASE                   0x1E781000
+#define AST_TIMER_BASE                 0x1E782000
+#define AST_UART1_BASE                 0x1E783000
+#define AST_UART5_BASE                 0x1E784000
+#define AST_WDT_BASE                   0x1E785000
+#define AST_PWM_BASE                   0x1E786000
+#define AST_VUART0_BASE                0x1E787000    /* Not in AST3100   */
+#define AST_VUART1_BASE                0x1E788000    /* Not in AST3100   */
+#define AST_LPC_BASE                   0x1E789000    /* Not in AST3100   */
+#define AST_I2C_BASE                   0x1E78A000
+#define AST_PECI_BASE                  0x1E78B000    /* Not in AST3100   */
+#define AST_UART2_BASE                 0x1E78D000
+#define AST_UART3_BASE                 0x1E78E000
+#define AST_UART4_BASE                 0x1E78F000
+#define AST_PCIARBITER_BASE            0x1E78C000
+#if defined(CONFIG_SOC_AST2530)
+#define AST_UART6_BASE                 0x1E790000
+#define AST_UART7_BASE                 0x1E791000
+#define AST_UART8_BASE                 0x1E792000
+#define AST_UART9_BASE                 0x1E793000
+#define AST_UART10_BASE                0x1E794000
+#define AST_UART11_BASE                0x1E795000
+#define AST_UART12_BASE                0x1E796000
+#define AST_UART13_BASE                0x1E797000
+#endif
+#if defined(CONFIG_SOC_AST2500) || defined(CONFIG_SOC_AST2530)
+#define AST_UART_UDMA_BASE             0x1E79E000
+#endif
+#ifdef CONFIG_SOC_AST3200
+#define AST_H264_BASE                  0x1E7C0000
+#endif
+
+
+/*--------------- Virtual address of the IO Registers Region  ------------*/
+#define AST_REGISTER_VA_BASE            IO_ADDRESS(AST_REGISTER_BASE)
+
+#define AST_SPI_FLASH_VA_BASE           IO_ADDRESS(AST_SPI_FLASH_BASE)
+#define AST_SMC_VA_BASE                 IO_ADDRESS(AST_SMC_BASE)
+#define AST_FMC_VA_BASE                 IO_ADDRESS(AST_FMC_BASE)
+#define AST_AHBC_VA_BASE                IO_ADDRESS(AST_AHBC_BASE)
+#define AST_MAC1_VA_BASE                IO_ADDRESS(AST_MAC1_BASE)
+#define AST_MAC2_VA_BASE                IO_ADDRESS(AST_MAC2_BASE)
+#define AST_MAC3_VA_BASE                IO_ADDRESS(AST_MAC3_BASE)
+#define AST_MAC4_VA_BASE                IO_ADDRESS(AST_MAC4_BASE)
+#define AST_USB20_VA_BASE               IO_ADDRESS(AST_USB20_BASE)
+#if defined(CONFIG_SOC_AST3200) || defined(CONFIG_SOC_AST2500) || defined(CONFIG_SOC_AST2530)
+#define AST_USB20_1_VA_BASE             IO_ADDRESS(AST_USB20_1_BASE)
+#define AST_USB20_2_VA_BASE             IO_ADDRESS(AST_USB20_2_BASE)
+#endif
+#define AST_USB11_VA_BASE               IO_ADDRESS(AST_USB11_BASE)
+#define AST_IC_VA_BASE                  IO_ADDRESS(AST_IC_BASE)
+#define AST_SDRAMC_VA_BASE              IO_ADDRESS(AST_SDRAMC_BASE)
+#define AST_USB1_VA_BASE                IO_ADDRESS(AST_USB1_BASE)
+#define AST_SCU_VA_BASE                 IO_ADDRESS(AST_SCU_BASE)
+#define AST_CRYPTO_VA_BASE              IO_ADDRESS(AST_CRYPTO_BASE)
+#define AST_JTAG_VA_BASE                IO_ADDRESS(AST_JTAG_BASE)
+
+#define AST_GRAPHIC_VA_BASE             IO_ADDRESS(AST_GRAPHIC_BASE)
+#define AST_DMA_VA_BASE                 IO_ADDRESS(AST_DMA_BASE)
+#define AST_MCTP_VA_BASE                IO_ADDRESS(AST_MCTP_BASE)
+#define AST_ADC_VA_BASE                 IO_ADDRESS(AST_ADC_BASE)
+#define AST_PS2_VA_BASE                 IO_ADDRESS(AST_PS2_BASE)
+#define AST_RFX_VA_BASE                 IO_ADDRESS(AST_RFX_BASE)
+#if defined(CONFIG_SOC_AST3200) || defined(CONFIG_SOC_AST2500) || defined(CONFIG_SOC_AST2530)
+#ifdef CONFIG_SOC_AST3200
+#define AST_H264_VA_BASE                IO_ADDRESS(AST_H264_BASE)
+#endif
+#define AST_PCIE_VA_BASE                IO_ADDRESS(AST_PCIE_BASE)
+#define AST_P2X_VA_BASE                 IO_ADDRESS(AST_P2X_BASE)	
+#define AST_PCIE_WIN_VA_BASE            IO_ADDRESS(AST_PCIE_WIN_BASE)
+#endif
+#define AST_LPC_PLUS_VA_BASE            IO_ADDRESS(AST_LPC_PLUS_BASE)
+#define AST_VIDEO_VA_BASE               IO_ADDRESS(AST_VIDEO_BASE)
+#define AST_AHB_TO_PBUS_VA_BASE         IO_ADDRESS(AST_AHB_TO_PBUS_BASE)
+#define AST_MDMA_VA_BASE                IO_ADDRESS(AST_MDMA_BASE)
+#define AST_2D_VA_BASE                  IO_ADDRESS(AST_2D_BASE)
+#define AST_GPIO_VA_BASE                IO_ADDRESS(AST_GPIO_BASE)
+#define AST_RTC_VA_BASE                 IO_ADDRESS(AST_RTC_BASE)
+#define AST_TIMER_VA_BASE               IO_ADDRESS(AST_TIMER_BASE)
+#define AST_UART1_VA_BASE               IO_ADDRESS(AST_UART1_BASE)
+#define AST_UART2_VA_BASE               IO_ADDRESS(AST_UART2_BASE)
+#define AST_UART3_VA_BASE               IO_ADDRESS(AST_UART3_BASE)
+#define AST_UART4_VA_BASE               IO_ADDRESS(AST_UART4_BASE)
+#define AST_UART5_VA_BASE               IO_ADDRESS(AST_UART5_BASE)
+#define AST_WDT_VA_BASE                 IO_ADDRESS(AST_WDT_BASE)
+#define AST_PWM_VA_BASE                 IO_ADDRESS(AST_PWM_BASE)
+#define AST_LPC_VA_BASE                 IO_ADDRESS(AST_LPC_BASE)
+#define AST_VUART0_VA_BASE              IO_ADDRESS(AST_VUART0_BASE)
+#define AST_VUART1_VA_BASE              IO_ADDRESS(AST_VUART1_BASE)
+#define AST_I2C_VA_BASE                 IO_ADDRESS(AST_I2C_BASE)
+#define AST_PECI_VA_BASE                IO_ADDRESS(AST_PECI_BASE)
+#define AST_PCIARBITER_VA_BASE          IO_ADDRESS(AST_PCIARBITER_BASE)
+#if defined(CONFIG_SOC_AST2530)
+#define AST_UART6_VA_BASE               IO_ADDRESS(AST_UART6_BASE)
+#define AST_UART7_VA_BASE               IO_ADDRESS(AST_UART7_BASE)
+#define AST_UART8_VA_BASE               IO_ADDRESS(AST_UART8_BASE)
+#define AST_UART9_VA_BASE               IO_ADDRESS(AST_UART9_BASE)
+#define AST_UART10_VA_BASE              IO_ADDRESS(AST_UART10_BASE)
+#define AST_UART11_VA_BASE              IO_ADDRESS(AST_UART11_BASE)
+#define AST_UART12_VA_BASE              IO_ADDRESS(AST_UART12_BASE)
+#define AST_UART13_VA_BASE              IO_ADDRESS(AST_UART13_BASE)
+#endif
+#if defined(CONFIG_SOC_AST2500) || defined(CONFIG_SOC_AST2530)
+#define AST_UART_UDMA_VA_BASE           IO_ADDRESS(AST_UART_UDMA_BASE)
+#endif
+
+
+/*****************************************************************
+                     IRQ Assignment
+*****************************************************************/
+#ifdef CONFIG_SOC_AST2300
+#define NR_IRQS                         46
+#define MAXIRQNUM                       45
+#endif
+
+#if defined(CONFIG_SOC_AST2400) || defined(CONFIG_SOC_AST1250) 
+#define NR_IRQS                			51	
+#define MAXIRQNUM           			50
+#endif
+
+#if defined(CONFIG_SOC_AST2500) || defined(CONFIG_SOC_AST2530)
+#ifdef CONFIG_PCIE_AST
+#define AST_VIC_NUM						64
+//#define NR_IRQS                			AST_VIC_NUM + ARCH_NR_PCIE
+#define NR_IRQS                         AST_VIC_NUM + ARCH_NR_PCIE + AST_NUM_MSI_IRQS
+#define MAXIRQNUM           			(AST_VIC_NUM + ARCH_NR_PCIE + AST_NUM_MSI_IRQS- 1)
+#else
+#define NR_IRQS                			64	
+#define MAXIRQNUM           			63
+#endif
+#endif
+
+#ifdef CONFIG_SOC_AST3100
+#define NR_IRQS                			51
+#define MAXIRQNUM           			50
+#endif
+
+#ifdef CONFIG_SOC_AST3200
+#define AST_VIC_NUM						64
+#define NR_IRQS                			AST_VIC_NUM + ARCH_NR_PCIE
+#define MAXIRQNUM           			(AST_VIC_NUM + ARCH_NR_PCIE - 1)
+#endif
+
+
+#define BW_CMP_NR_IRQS		         32 //This is the number of IRQS backward-compatible to ast2050/2150
+
+//PCIE_AST
+#ifdef CONFIG_PCIE_AST
+#define ARCH_NR_PCIE                    4
+#ifdef CONFIG_PCI_MSI
+#define AST_NUM_MSI_IRQS                32
+#else
+#define AST_NUM_MSI_IRQS                0
+#endif
+
+//#define AST_NUM_MSI_IRQS			0
+#define IRQ_PCIE_CHAIN				IRQ_PCIE
+#define IRQ_PCIE_CHAIN_START        (AST_VIC_NUM)
+
+#define IRQ_PCIE_INTA				(IRQ_PCIE_CHAIN_START)
+#define IRQ_PCIE_INTB				(IRQ_PCIE_CHAIN_START + 1)
+#define IRQ_PCIE_INTC				(IRQ_PCIE_CHAIN_START + 2)
+#define IRQ_PCIE_INTD				(IRQ_PCIE_CHAIN_START + 3)
+#define IRQ_PCIE_MSI0				(IRQ_PCIE_INTD + 1)		// support max 32 MSI
+#else
+#define ARCH_NR_PCIE				0
+#define AST_NUM_MSI_IRQS			0
+#endif //PCIE_AST
+
+#define IRQ_ECC                0
+#define IRQMASK_ECC            (1 << IRQ_ECC)
+#define IRQ_MIC                1
+#define IRQMASK_MIC            (1 << IRQ_MIC)
+#define IRQ_MAC1               2
+#define IRQMASK_MAC1           (1 << IRQ_MAC1)
+#define IRQ_MAC2               3
+#define IRQMASK_MAC2           (1 << IRQ_MAC2)
+#define IRQ_HAC                4 // CRYPTO
+#define IRQMASK_HAC            (1 << IRQ_HAC)
+#define IRQ_USB20              5 // 2.0 Hub/Host
+#define IRQMASK_USB20          (1 << IRQ_USB20)
+#define IRQ_MDMA               6						/* Non AST3100 */
+#define IRQMASK_MDMA           (1 << IRQ_MDMA)
+
+#define IRQ_RFXV0              7						/* AST3100  ???? */
+#define IRQMASK_RFXV0          (1 << IRQ_RFXV0)
+#define IRQ_VIDEO              7						/* Non AST3100 */
+#define IRQMASK_VIDEO          (1 << IRQ_VIDEO)
+
+#define IRQ_LPC                8						/* Non AST3100 */
+#define IRQ_VUARTINT0          8
+#define IRQMASK_LPC            (1 << IRQ_LPC)
+#define IRQ_UARTINT0           9
+#define IRQMASK_UARTINT0       (1 << IRQ_UARTINT0)
+#define IRQ_UARTINT4           10
+#define IRQMASK_UARTINT4       (1 << IRQ_UARTINT4)
+
+#define IRQ_RFXV1              11						/* AST3100 */
+#define IRQMASK_RFXV1          (1 << IRQ_RFXV1)
+
+#define IRQ_I2C                12
+#define IRQMASK_I2C            (1 << IRQ_I2C)
+
+#if defined(CONFIG_SOC_AST3200) || defined(CONFIG_SOC_AST2500) || defined(CONFIG_SOC_AST2530)
+#define IRQ_USB20_2            13 			
+#define IRQMASK_USB20_2        (1 << IRQ_USB20_2)
+#else
+#define IRQ_USB1               13 // 1.1 HID			/* Non AST3100 */
+#define IRQMASK_USB1           (1 << IRQ_USB1)
+#endif
+#define IRQ_USB11              14 // 1.1 Host
+#define IRQMASK_USB11          (1 << IRQ_USB11)
+
+#define IRQ_PECI               15                         /* Non AST3100 */
+#define IRQMASK_PECI           (1 << IRQ_PECI)
+#define IRQ_TIMERINT0          16
+#define IRQMASK_TIMERINT0      (1 << IRQ_TIMERINT0)
+#define IRQ_TIMERINT1          17
+#define IRQMASK_TIMERINT1      (1 << IRQ_TIMERINT1)
+#define IRQ_TIMERINT2          18
+#define IRQMASK_TIMERINT2      (1 << IRQ_TIMERINT2)
+#define IRQ_FLASH              19 // SMC
+#define IRQMASK_FLASH          (1 << IRQ_FLASH)
+#define IRQ_GPIO               20
+#define IRQMASK_GPIO           (1 << IRQ_GPIO)
+#define IRQ_SCU                21
+#define IRQMASK_SCU            (1 << IRQ_SCU)
+#define IRQ_RTC_ALARM          22
+#define IRQMASK_RTC_ALARM      (1 << IRQ_RTC_ALARM)
+#define IRQ_MAC3               23						/*  ????   */
+#define IRQMASK_MAC3           (1 << IRQ_MAC3)
+#define IRQ_MAC4               24						/*  ????   */
+#define IRQMASK_MAC4           (1 << IRQ_MAC4)
+#define IRQ_CRT                25
+#define IRQMASK_CRT            (1 << IRQ_CRT)
+#define IRQ_SD                 26
+#define IRQMASK_SD             (1 << IRQ_SD)
+#define IRQ_WDT                27
+#define IRQMASK_WDT            (1 << IRQ_WDT)
+#define IRQ_TACHO              28 // PWM
+#define IRQMASK_TACHO          (1 << IRQ_TACHO)
+#define IRQ_2D                 29
+#define IRQMASK_2D             (1 << IRQ_2D)
+#define IRQ_PCI                30 // Sys Wakeup
+#define IRQMASK_PCI            (1 << IRQ_PCI)
+#define IRQ_ADC       		   31
+#define IRQMASK_ADC      	   (1 << IRQ_ADC)
+#define IRQ_UARTINT1           32
+#define IRQMASK_UARTINT1       (1 << (IRQ_UARTINT1 - BW_CMP_NR_IRQS))
+#define IRQ_UARTINT2           33
+#define IRQMASK_UARTINT2       (1 << (IRQ_UARTINT2 - BW_CMP_NR_IRQS))
+#define IRQ_UARTINT3           34
+#define IRQMASK_UARTINT3       (1 << (IRQ_UARTINT3 - BW_CMP_NR_IRQS))
+#define IRQ_TIMERINT3          35
+#define IRQMASK_TIMERINT3      (1 << (IRQ_TIMERINT3 - BW_CMP_NR_IRQS))
+#define IRQ_TIMERINT4          36
+#define IRQMASK_TIMERINT4      (1 << (IRQ_TIMERINT4 - BW_CMP_NR_IRQS))
+#define IRQ_TIMERINT5          37
+#define IRQMASK_TIMERINT5      (1 << (IRQ_TIMERINT5 - BW_CMP_NR_IRQS))
+#define IRQ_TIMERINT6          38
+#define IRQMASK_TIMERINT6      (1 << (IRQ_TIMERINT6 - BW_CMP_NR_IRQS))
+#define IRQ_TIMERINT7          39
+#define IRQMASK_TIMERINT7      (1 << (IRQ_TIMERINT7 - BW_CMP_NR_IRQS))
+#define IRQ_SGPIO_MASTER       40
+#define IRQMASK_SGPIO_MASTER   (1 << (IRQ_SGPIO_MASTER - BW_CMP_NR_IRQS))
+
+#ifndef CONFIG_SOC_AST3200
+#define IRQ_SGPIO_SLAVE        41
+#define IRQMASK_SGPIO_SLAVE    (1 << (IRQ_SGPIO_SLAVE - BW_CMP_NR_IRQS))
+#else
+#define IRQ_P2X_BRIDGE         41
+#define IRQMASK_P2X_BRIDGE     (1 << (IRQ_P2X_BRIDGE - BW_CMP_NR_IRQS))
+#endif
+
+#define IRQ_MCTP               42                        /* Non AST3100 */
+#define IRQMASK_MCTP           (1 << (IRQ_MCTP - BW_CMP_NR_IRQS))
+#define IRQ_JTAG_MASTER        43
+#define IRQMASK_JTAG_MASTER    (1 << (IRQ_JTAG_MASTER - BW_CMP_NR_IRQS))
+
+#define IRQ_PS2				   44						  /* AST3100 */
+#define IRQMASK_PS2			   (1 << (IRQ_PS2 - BW_CMP_NR_IRQS))
+
+#define IRQ_COPROCESSOR		   45
+#define IRQMASK_COPROCESSOR	   (1 << (IRQ_COPROCESSOR - BW_CMP_NR_IRQS))
+#define IRQ_SOFT_INTR          45
+#define IRQMASK_SOFT_INTR      (1 << (IRQ_SOFT_INTR - BW_CMP_NR_IRQS))
+#define IRQ_MAIL_BOX           46
+#define IRQMASK_MAIL_BOX       (1 << (IRQ_MAIL_BOX - BW_CMP_NR_IRQS))
+#if defined(CONFIG_SOC_AST2500) || defined(CONFIG_SOC_AST2530)
+#define IRQ_AHBC               47
+#define IRQMASK_AHBC           (1 << (IRQ_AHBC - BW_CMP_NR_IRQS))
+#define IRQ_GPIO_L1            48
+#define IRQMASK_GPIO_L1        (1 << (IRQ_GPIO_L1 - BW_CMP_NR_IRQS))
+#define IRQ_GPIO_L3            49
+#define IRQMASK_GPIO_L3        (1 << (IRQ_GPIO_L3 - BW_CMP_NR_IRQS))
+#else
+#define IRQ_GPIO_L1            47
+#define IRQMASK_GPIO_L1        (1 << (IRQ_GPIO_L1 - BW_CMP_NR_IRQS))
+#define IRQ_GPIO_L3            48
+#define IRQMASK_GPIO_L3        (1 << (IRQ_GPIO_L3 - BW_CMP_NR_IRQS))
+#define IRQ_GPIO_M1            49
+#define IRQMASK_GPIO_M1        (1 << (IRQ_GPIO_M1 - BW_CMP_NR_IRQS))
+#endif
+#define IRQ_UART_UDMA_INT      50
+#define IRQMASK_UART_UDMA_INT  (1 << (IRQ_UART_UDMA_INT - BW_CMP_NR_IRQS))
+
+#if defined(CONFIG_SOC_AST2500) || defined(CONFIG_SOC_AST2530)
+#define IRQ_UARTINT5           51
+#define IRQMASK_UARTINT5       (1 << (IRQ_UARTINT5 - BW_CMP_NR_IRQS))
+#define IRQ_UARTINT6           52
+#define IRQMASK_UARTINT6       (1 << (IRQ_UARTINT6 - BW_CMP_NR_IRQS))
+#define IRQ_UARTINT7           53
+#define IRQMASK_UARTINT7       (1 << (IRQ_UARTINT7 - BW_CMP_NR_IRQS))
+#define IRQ_UARTINT8           54
+#define IRQMASK_UARTINT8       (1 << (IRQ_UARTINT8 - BW_CMP_NR_IRQS))
+#define IRQ_UARTINT9           55
+#define IRQMASK_UARTINT9       (1 << (IRQ_UARTINT9 - BW_CMP_NR_IRQS))
+#define IRQ_UARTINT10          56
+#define IRQMASK_UARTINT10      (1 << (IRQ_UARTINT10 - BW_CMP_NR_IRQS))
+#define IRQ_UARTINT11          57
+#define IRQMASK_UARTINT11      (1 << (IRQ_UARTINT11 - BW_CMP_NR_IRQS))
+#define IRQ_UARTINT12          58
+#define IRQMASK_UARTINT12      (1 << (IRQ_UARTINT12 - BW_CMP_NR_IRQS))
+#define IRQ_SPI_INT            59
+#define IRQMASK_SPI_INT        (1 << (IRQ_SPI_INT   - BW_CMP_NR_IRQS))
+#endif
+
+#if defined(CONFIG_SOC_AST3200) || defined(CONFIG_SOC_AST2500) || defined(CONFIG_SOC_AST2530)
+#ifdef CONFIG_SOC_AST3200
+#define IRQ_H264               61
+#define IRQMASK_H264           (1 << (IRQ_H264 - BW_CMP_NR_IRQS))
+
+#define IRQ_420_422            62
+#define IRQMASK_420_422        (1 << (IRQ_420_422 - BW_CMP_NR_IRQS))
+#endif
+#define IRQ_P2X                63
+#define IRQMASK_P2X            (1 << (IRQ_P2X - BW_CMP_NR_IRQS))
+#endif
+
+/* Mask of valid system controller interrupts */
+/* VIC means VIC1 */
+#ifdef CONFIG_SOC_AST3100
+#define AST_VIC_VALID_INTMASK    ( \
+                                         IRQMASK_ECC | \
+                                         IRQMASK_MIC | \
+                                         (IRQMASK_MAC1 | IRQMASK_MAC2) | \
+                                         IRQMASK_HAC | \
+                                         IRQMASK_USB20 | \
+                                         (IRQMASK_UARTINT0 | IRQMASK_UARTINT4) | \
+                                         (IRQMASK_RFXV0 | IRQMASK_RFXV1) | \
+                                         IRQMASK_I2C | \
+                                         IRQMASK_USB11 | \
+                                         (IRQMASK_TIMERINT0 | IRQMASK_TIMERINT1 | IRQMASK_TIMERINT2) | \
+                                         IRQMASK_FLASH | \
+                                         IRQMASK_GPIO | \
+                                         IRQMASK_SCU | \
+                                         IRQ_RTC_ALARM | \
+                                         (IRQMASK_MAC3 | IRQMASK_MAC4) | \
+                                         IRQMASK_CRT | \
+                                         IRQMASK_SD | \
+                                         IRQMASK_WDT | \
+                                         IRQMASK_TACHO | \
+                                         IRQMASK_2D | \
+                                         IRQMASK_PCI | \
+                                         IRQMASK_ADC \
+                   )
+#define EXT_AST_VIC_VALID_INTMASK    ( \
+                                         IRQMASK_UARTINT1 | IRQMASK_UARTINT2 | IRQMASK_UARTINT3 | IRQMASK_SGPIO_MASTER | \
+                                         IRQMASK_PS2 \
+					)
+#else
+#ifdef CONFIG_SOC_AST3200
+#define AST_VIC_VALID_INTMASK    ( \
+                                         IRQMASK_ECC | \
+                                         IRQMASK_MIC | \
+                                         (IRQMASK_MAC1 | IRQMASK_MAC2) | \
+                                         IRQMASK_HAC | \
+                                         IRQMASK_USB20 | \
+                                         IRQMASK_USB20_2 | \
+                                         (IRQMASK_UARTINT0 | IRQMASK_UARTINT4) | \
+                                         (IRQMASK_RFXV0 | IRQMASK_RFXV1) | \
+                                         IRQMASK_I2C | \
+                                         IRQMASK_USB11 | \
+                                         (IRQMASK_TIMERINT0 | IRQMASK_TIMERINT1 | IRQMASK_TIMERINT2) | \
+                                         IRQMASK_FLASH | \
+                                         IRQMASK_GPIO | \
+                                         IRQMASK_SCU | \
+                                         IRQ_RTC_ALARM | \
+                                         (IRQMASK_MAC3 | IRQMASK_MAC4) | \
+                                         IRQMASK_CRT | \
+                                         IRQMASK_SD | \
+                                         IRQMASK_WDT | \
+                                         IRQMASK_TACHO | \
+                                         IRQMASK_2D | \
+                                         IRQMASK_PCI | \
+                                         IRQMASK_ADC \
+                   )
+#define EXT_AST_VIC_VALID_INTMASK    ( \
+                                         IRQMASK_UARTINT1 | IRQMASK_UARTINT2 | IRQMASK_UARTINT3 | IRQMASK_SGPIO_MASTER | \
+                                         IRQMASK_PS2 | IRQMASK_H264 | IRQMASK_420_422 | IRQMASK_P2X | IRQMASK_P2X_BRIDGE \
+					)
+#else /* Non CONFIG_SOC_AST3100 and CONFIG_SOC_AST3200 */
+
+#if defined(CONFIG_SOC_AST2500) || defined(CONFIG_SOC_AST2530)
+#define AST_VIC_VALID_INTMASK    ( \
+                                         IRQMASK_ECC | \
+                                         IRQMASK_MIC | \
+                                         (IRQMASK_MAC1 | IRQMASK_MAC2) | \
+                                         IRQMASK_HAC | \
+                                         IRQMASK_USB20 | \
+                                         IRQMASK_MDMA | \
+                                         IRQMASK_VIDEO | \
+                                         IRQMASK_LPC | \
+                                         (IRQMASK_UARTINT0 | IRQMASK_UARTINT4) | \
+                                         IRQMASK_I2C | \
+                                         IRQMASK_USB20_2 | \
+                                         IRQMASK_USB11 | \
+                                         IRQMASK_PECI | \
+                                         (IRQMASK_TIMERINT0 | IRQMASK_TIMERINT1 | IRQMASK_TIMERINT2) | \
+                                         IRQMASK_FLASH | \
+                                         IRQMASK_GPIO | \
+                                         IRQMASK_SCU | \
+                                         IRQ_RTC_ALARM | \
+                                         (IRQMASK_MAC3 | IRQMASK_MAC4) | \
+                                         IRQMASK_CRT | \
+                                         IRQMASK_SD | \
+                                         IRQMASK_WDT | \
+                                         IRQMASK_TACHO | \
+                                         IRQMASK_2D | \
+                                         IRQMASK_PCI  \
+                   )
+
+#else /* Non CONFIG_SOC_AST3100, CONFIG_SOC_AST3200 and CONFIG_SOC_AST2500 */
+#define AST_VIC_VALID_INTMASK    ( \
+                                         IRQMASK_ECC | \
+                                         IRQMASK_MIC | \
+                                         (IRQMASK_MAC1 | IRQMASK_MAC2) | \
+                                         IRQMASK_HAC | \
+                                         IRQMASK_USB20 | \
+                                         IRQMASK_MDMA | \
+                                         IRQMASK_VIDEO | \
+                                         IRQMASK_LPC | \
+                                         (IRQMASK_UARTINT0 | IRQMASK_UARTINT4) | \
+                                         IRQMASK_I2C | \
+                                         IRQMASK_USB1 | \
+                                         IRQMASK_PECI | \
+                                         (IRQMASK_TIMERINT0 | IRQMASK_TIMERINT1 | IRQMASK_TIMERINT2) | \
+                                         IRQMASK_FLASH | \
+                                         IRQMASK_GPIO | \
+                                         IRQMASK_SCU | \
+                                         IRQ_RTC_ALARM | \
+                                         (IRQMASK_MAC3 | IRQMASK_MAC4) | \
+                                         IRQMASK_CRT | \
+                                         IRQMASK_SD | \
+                                         IRQMASK_WDT | \
+                                         IRQMASK_TACHO | \
+                                         IRQMASK_2D | \
+                                         IRQMASK_PCI  \
+                   )
+#endif //CONFIG_SOC_AST2500
+#if !defined(CONFIG_SOC_AST2500) && !defined(CONFIG_SOC_AST2530)
+#define EXT_AST_VIC_VALID_INTMASK    ( \
+                                         IRQMASK_UARTINT1 | IRQMASK_UARTINT2 | IRQMASK_UARTINT3 | IRQMASK_SGPIO_MASTER | IRQMASK_JTAG_MASTER \
+					)
+#else
+#define EXT_AST_VIC_VALID_INTMASK    ( \
+                                         IRQMASK_UARTINT1 | IRQMASK_UARTINT2 | IRQMASK_UARTINT3 | IRQMASK_SGPIO_MASTER | IRQMASK_JTAG_MASTER | \
+                                         IRQMASK_UARTINT5 | IRQMASK_UARTINT6 | IRQMASK_UARTINT7 | IRQMASK_UARTINT8 | IRQMASK_UARTINT9 | \
+                                         IRQMASK_UARTINT10 | IRQMASK_UARTINT11 | IRQMASK_UARTINT12 | IRQMASK_UART_UDMA_INT | IRQMASK_MAIL_BOX | IRQMASK_MCTP | IRQMASK_P2X \
+					)
+#endif					
+
+#endif //CONFIG_SOC_AST3200					
+#endif					
+#endif //_HWREG_ASTCOMMON_H_
diff -Naur linux-5.2.8/arch/arm/include/mach/hwreg.h linux/arch/arm/include/mach/hwreg.h
--- linux-5.2.8/arch/arm/include/mach/hwreg.h	1969-12-31 19:00:00.000000000 -0500
+++ linux/arch/arm/include/mach/hwreg.h	2019-09-03 13:57:55.944983142 -0400
@@ -0,0 +1,274 @@
+/*
+ *  This file contains the AST SOC Register locations
+ *
+ *  Copyright (C) 2005 American Megatrends Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef     _HWREG_ASTCOMMON_H_
+#define     _HWREG_ASTCOMMON_H_
+
+
+/* -----------------------------------------------------------------
+ *      	         SMC Registers
+ * -----------------------------------------------------------------
+*/
+#define SMC_CE0_SEGMENT_AC_TIMING_REG   (AST_SMC_VA_BASE + 0x00)
+#define SMC_CE0_CTRL_REG                (AST_SMC_VA_BASE + 0x04)
+#define SMC_CE1_CTRL_REG                (AST_SMC_VA_BASE + 0x08)
+#define SMC_CE2_CTRL_REG                (AST_SMC_VA_BASE + 0x0C)
+
+/* -----------------------------------------------------------------
+ *      	         AHB Registers
+ * -----------------------------------------------------------------
+*/
+#define AHB_PROTECTION_KEY_REG          (AST_AHBC_VA_BASE + 0x00)
+#define AHB_PRIORITY_CTRL_REG           (AST_AHBC_VA_BASE + 0x80)
+#define AHB_INTERRUPT_CTRL_REG          (AST_AHBC_VA_BASE + 0x88)
+#define AHB_ADDR_REMAP_REG              (AST_AHBC_VA_BASE + 0x8C)
+
+/* -----------------------------------------------------------------
+ *      	        SRAM Registers
+ * -----------------------------------------------------------------
+ */
+
+ /* -------------------------------------------------------------
+ *                  SDRAM Registers
+ * -------------------------------------------------------------
+ */
+#define SDRAM_PROTECTION_KEY_REG            (AST_SDRAMC_VA_BASE + 0x00)
+#define SDRAM_CONFIG_REG                    (AST_SDRAMC_VA_BASE + 0x04)
+#define SDRAM_GRAP_MEM_PROTECTION_REG       (AST_SDRAMC_VA_BASE + 0x08)
+#define SDRAM_REFRESH_TIMING_REG            (AST_SDRAMC_VA_BASE + 0x0C)
+#define SDRAM_NSPEED_REG1                   (AST_SDRAMC_VA_BASE + 0x10)
+#define SDRAM_LSPEED_REG1                   (AST_SDRAMC_VA_BASE + 0x14)
+#define SDRAM_NSPEED_REG2                   (AST_SDRAMC_VA_BASE + 0x18)
+#define SDRAM_LSPEED_REG2                   (AST_SDRAMC_VA_BASE + 0x1C)
+#define SDRAM_NSPEED_DELAY_CTRL_REG         (AST_SDRAMC_VA_BASE + 0x20)
+#define SDRAM_LSPEED_DELAY_CTRL_REG         (AST_SDRAMC_VA_BASE + 0x24)
+#define SDRAM_MODE_SET_CTRL_REG             (AST_SDRAMC_VA_BASE + 0x28)
+#define SDRAM_MRS_EMRS2_MODE_SET_REG        (AST_SDRAMC_VA_BASE + 0x2C)
+#define SDRAM_MRS_EMRS3_MODE_SET_REG        (AST_SDRAMC_VA_BASE + 0x30)
+#define SDRAM_PWR_CTRL_REG                  (AST_SDRAMC_VA_BASE + 0x34)
+#define SDRAM_PAGE_MISS_LATENCY_MASK_REG    (AST_SDRAMC_VA_BASE + 0x38)
+#define SDRAM_PRIORITY_GROUP_SET_REG        (AST_SDRAMC_VA_BASE + 0x3C)
+#define SDRAM_MAX_GRANT_LENGTH_REG1         (AST_SDRAMC_VA_BASE + 0x40)
+#define SDRAM_MAX_GRANT_LENGTH_REG2         (AST_SDRAMC_VA_BASE + 0x44)
+#define SDRAM_MAX_GRANT_LENGTH_REG3         (AST_SDRAMC_VA_BASE + 0x48)
+#define SDRAM_ECC_CTRL_STATUS_REG           (AST_SDRAMC_VA_BASE + 0x50)
+#define SDRAM_ECC_SEGMENT_EN_REG            (AST_SDRAMC_VA_BASE + 0x54)
+#define SDRAM_ECC_SCRUB_REQ_MASK_CTRL_REG   (AST_SDRAMC_VA_BASE + 0x58)
+#define SDRAM_ECC_ADDR_FIRST_ERR_REG        (AST_SDRAMC_VA_BASE + 0x5C)
+#define SDRAM_IO_BUFF_MODE_REG              (AST_SDRAMC_VA_BASE + 0x60)
+#define SDRAM_DLL_CTRL_REG1                 (AST_SDRAMC_VA_BASE + 0x64)
+#define SDRAM_DLL_CTRL_REG2                 (AST_SDRAMC_VA_BASE + 0x68)
+#define SDRAM_DLL_CTRL_REG3                 (AST_SDRAMC_VA_BASE + 0x6C)
+#define SDRAM_TEST_CTRL_STATUS_REG          (AST_SDRAMC_VA_BASE + 0x70)
+#define SDRAM_TEST_START_ADDR_LENGTH_REG    (AST_SDRAMC_VA_BASE + 0x74)
+#define SDRAM_TEST_FAIL_DQ_BIT_REG          (AST_SDRAMC_VA_BASE + 0x78)
+#define SDRAM_TEST_INIT_VALUE_REG           (AST_SDRAMC_VA_BASE + 0x7C)
+#define AST2100_COMPATIBLE_SCU_PASSWORD     (AST_SDRAMC_VA_BASE + 0x100)
+#define AST2100_COMPATIBLE_SCU_MPLL_PARA    (AST_SDRAMC_VA_BASE + 0x120)
+
+/*-------------------------------------------------------------------
+ *				    SCU Registers
+ *--------------------------------------------------------------------
+ */
+#define SCU_KEY_CONTROL_REG			    (AST_SCU_VA_BASE +  0x00)
+#define SCU_SYS_RESET_REG               (AST_SCU_VA_BASE +  0x04)
+#define SCU_CLK_SELECT_REG              (AST_SCU_VA_BASE +  0x08)
+#define SCU_CLK_STOP_REG                (AST_SCU_VA_BASE +  0x0C)
+#define SCU_OSC_COUNT_CTRL_REG			(AST_SCU_VA_BASE +  0x10)
+#define SCU_OSC_COUNT_VALUE_REG         (AST_SCU_VA_BASE +  0x14)
+#define SCU_INTR_CRTL_VALUE_REG         (AST_SCU_VA_BASE +  0x18)
+#define SCU_32CLK_ERR_CORRECT_REG       (AST_SCU_VA_BASE +  0x1C)
+#define SCU_M_PLL_PARAM_REG             (AST_SCU_VA_BASE +  0x20)
+#define SCU_H_PLL_PARAM_REG             (AST_SCU_VA_BASE +  0x24)
+#define SCU_FREQ_CNTR_CMP_REG           (AST_SCU_VA_BASE +  0x28)
+#define SCU_MISC_CTRL_REG               (AST_SCU_VA_BASE +  0x2C)
+#define SCU_SOC_SCRATCH1_REG            (AST_SCU_VA_BASE +  0x40)
+#define SCU_SOC_SCRATCH2_REG            (AST_SCU_VA_BASE +  0x44)
+#define SCU_HW_STRAPPING_REG            (AST_SCU_VA_BASE +  0x70)
+#define SCU_MULTIFUNCTION_PIN_REGISTER	(AST_SCU_VA_BASE +  0x74)
+#define SCU_HW_REVISION_CODE			(AST_SCU_VA_BASE +  0x7C)
+#define SCU_MULTI_FN_PIN_1              (AST_SCU_VA_BASE +  0x80)
+#define SCU_MULTI_FN_PIN_2              (AST_SCU_VA_BASE +  0x84)
+#define SCU_MULTI_FN_PIN_3              (AST_SCU_VA_BASE +  0x88)
+#define SCU_MULTI_FN_PIN_4              (AST_SCU_VA_BASE +  0x8C)
+#define SCU_MULTI_FN_PIN_5              (AST_SCU_VA_BASE +  0x90)
+#define SCU_MULTI_FN_PIN_6              (AST_SCU_VA_BASE +  0x94)
+#define SCU_PS2_PASSWORD				(AST_SCU_VA_BASE +  0xF0)
+
+/* -------------------------------------------------------------------
+ *  					Timer Registers
+ * -------------------------------------------------------------------
+ */
+#define TIMER1_COUNT_REG                (AST_TIMER_VA_BASE + 0x00)
+#define TIMER1_RELOAD_REG               (AST_TIMER_VA_BASE + 0x04)
+#define TIMER1_FIRST_MATCH_REG          (AST_TIMER_VA_BASE + 0x08)
+#define TIMER1_SEC_MATCH_REG            (AST_TIMER_VA_BASE + 0x0C)
+
+#define TIMER2_COUNT_REG                (AST_TIMER_VA_BASE + 0x10)
+#define TIMER2_RELOAD_REG               (AST_TIMER_VA_BASE + 0x14)
+#define TIMER2_FIRST_MATCH_REG          (AST_TIMER_VA_BASE + 0x18)
+#define TIMER2_SEC_MATCH_REG            (AST_TIMER_VA_BASE + 0x1C)
+
+#define TIMER3_COUNT_REG                (AST_TIMER_VA_BASE + 0x20)
+#define TIMER3_RELOAD_REG               (AST_TIMER_VA_BASE + 0x24)
+#define TIMER3_FIRST_MATCH_REG          (AST_TIMER_VA_BASE + 0x28)
+#define TIMER3_SEC_MATCH_REG            (AST_TIMER_VA_BASE + 0x2C)
+
+#define TIMER_CONTROL_REG               (AST_TIMER_VA_BASE + 0x30)
+
+/* -----------------------------------------------------------------
+ * 				 Interrupt Controller Register
+ * -----------------------------------------------------------------
+ */
+#define IRQ_STATUS_REG	                (AST_IC_VA_BASE + 0x00)
+#define FIQ_STATUS_REG	                (AST_IC_VA_BASE + 0x04)
+#define RAW_INT_STATUS_REG	            (AST_IC_VA_BASE + 0x08)
+#define IRQ_SELECT_REG	                (AST_IC_VA_BASE + 0x0C)
+#define IRQ_ENABLE_REG	                (AST_IC_VA_BASE + 0x10)
+#define IRQ_DISABLE_REG					(AST_IC_VA_BASE + 0x14)
+#define SOFT_INT_REG					(AST_IC_VA_BASE + 0x18)
+#define SOFT_INT_CLEAR_REG				(AST_IC_VA_BASE + 0x1C)
+#define PROTECT_ENABLE_REG				(AST_IC_VA_BASE + 0x20)
+#define INTERRUPT_SENS_REG				(AST_IC_VA_BASE + 0x24)
+#define INTERRUPT_BOTH_EDGE_TRIGGER_REG (AST_IC_VA_BASE + 0x28)
+#define INTERRUPT_EVENT_REG             (AST_IC_VA_BASE + 0x2C)
+#define EDGE_TRIGGERED_INTCLEAR_REG     (AST_IC_VA_BASE + 0x38)
+
+/* Interrupt Controllers */
+#define ASPEED_VIC_STATUS_OFFSET        0x00
+
+/* Interrupt Controllers 2 */
+#define ASPEED_VIC2_STATUS_OFFSET       0x84
+
+
+/* -----------------------------------------------------------------
+ * 				 Interrupt Controller Register for IRQ 32 - 44
+ * -----------------------------------------------------------------
+ */
+#define EXT_IRQ_SELECT_REG	            (AST_IC_VA_BASE + 0x9C)
+#define EXT_IRQ_ENABLE_REG 				(AST_IC_VA_BASE + 0xA4)
+#define EXT_IRQ_DISABLE_REG				(AST_IC_VA_BASE + 0xAC)
+#define EXT_EDGE_TRIGGERED_INTCLEAR_REG (AST_IC_VA_BASE + 0xDC)
+#define EXT_INTERRUPT_EVENT_REG         (AST_IC_VA_BASE + 0xD4)
+#define EXT_INTERRUPT_SENS_REG			(AST_IC_VA_BASE + 0xC4)
+
+
+/* --------------------------------------------------------------------
+ * 				 Interrupt Controller 2 Register
+ * --------------------------------------------------------------------
+ */
+#define VIC2_STATUS              (AST_GPIO_VA_BASE + 0x38)
+#define VIC2_RAW_STATUS          (AST_GPIO_VA_BASE + 0x38)
+#define VIC2_ENABLE_SET          (AST_GPIO_VA_BASE + 0x28)
+#define VIC2_ENABLE_CLEAR        (AST_GPIO_VA_BASE + 0x28)
+#define VIC2_SENSE               (AST_GPIO_VA_BASE + 0x30)
+#define VIC2_BOTH_EDGE		     (AST_GPIO_VA_BASE + 0x34)
+#define VIC2_EVENT               (AST_GPIO_VA_BASE + 0x2C)
+#define VIC2_EDGE_CLEAR          (AST_GPIO_VA_BASE + 0x38)
+
+/*---------------------------------------------------------------
+ *   GPIO Controllers Register
+ *  ------------------------------------------------------------
+ */
+#define GPIO_DATA_REG                   (AST_GPIO_VA_BASE + 0x00)
+#define GPIO_DIRECTION_REG              (AST_GPIO_VA_BASE + 0x04)
+
+/*---------------------------------------------------------------
+ *   I2C Controllers Register
+ *  ------------------------------------------------------------
+ */
+
+/*------------------------------------------------------------------
+ *   DMA Controllers Registers
+ *  ----------------------------------------------------------------
+ */
+
+/*------------------------------------------------------------------
+ *				 RTC Register Locations
+ *------------------------------------------------------------------*/
+
+
+/*------------------------------------------------------------------
+ *				 WDT Register Locations
+ *------------------------------------------------------------------*/
+#define WDT_CNT_STATUS_REG  (AST_WDT_VA_BASE + 0x00)
+#define WDT_RELOAD_REG		(AST_WDT_VA_BASE + 0x04)
+#define WDT_CNT_RESTART_REG (AST_WDT_VA_BASE + 0x08)
+#define WDT_CONTROL_REG		(AST_WDT_VA_BASE + 0x0C)
+#define WDT2_CNT_STATUS_REG (AST_WDT_VA_BASE + 0x20)
+#define WDT2_RELOAD_REG     (AST_WDT_VA_BASE + 0x24)
+#define WDT2_CNT_RESTART_REG (AST_WDT_VA_BASE + 0x28)
+#define WDT2_CONTROL_REG    (AST_WDT_VA_BASE + 0x2C)
+
+
+/*---------------------------------------------------------------
+ *   RFX Engine Register Locations
+ *  ------------------------------------------------------------
+ */
+#define RFX_FIFO_STAT_DEC_VER_REG       (AST_RFX_VA_BASE + 0x00)
+#define RFX_DRAM_BASE_ADDR_REG          (AST_RFX_VA_BASE + 0x04)
+#define RFX_ENGINE_READY_REG            (AST_RFX_VA_BASE + 0x08)
+#define RFX_ENGINE_STATUS_REG           (AST_RFX_VA_BASE + 0x0C)
+#define RFX_TS_BLOCKT_REG               (AST_RFX_VA_BASE + 0x10)
+#define RFX_TS_CODEC_CHANNELT_REG       (AST_RFX_VA_BASE + 0x14)
+#define RFX_TS_TILESET_1_REG            (AST_RFX_VA_BASE + 0x18)
+#define RFX_TS_TILESET_2_REG            (AST_RFX_VA_BASE + 0x1C)
+#define RFX_TS_TILESET_3_REG            (AST_RFX_VA_BASE + 0x20)
+#define RFX_TS_TILESET_4_REG            (AST_RFX_VA_BASE + 0x24)
+#define RFX_TS_TILE_1_REG               (AST_RFX_VA_BASE + 0x28)
+#define RFX_TS_TILE_2_REG               (AST_RFX_VA_BASE + 0x2C)
+#define RFX_TS_TILE_3_REG               (AST_RFX_VA_BASE + 0x30)
+#define RFX_TS_TILE_4_REG               (AST_RFX_VA_BASE + 0x34)
+#define RFX_TS_TILE_5_REG               (AST_RFX_VA_BASE + 0x38)
+#define RFX_DRAM_BASE_ADDR_LAST_REG     (AST_RFX_VA_BASE + 0x3C)
+#define RFX_PARAMETER_1_REG             (AST_RFX_VA_BASE + 0x40)
+#define RFX_PARAMETER_2_REG             (AST_RFX_VA_BASE + 0x44)
+#define RFX_INTR_CLR_REG                (AST_RFX_VA_BASE + 0x48)
+#define RFX_INTR_MASK_REG               (AST_RFX_VA_BASE + 0x4C)
+#define RFX_INTR_STAT_REG               (AST_RFX_VA_BASE + 0x50)
+#define RFX_QUANT_YL_REG                (AST_RFX_VA_BASE + 0x54)
+#define RFX_QUANT_YH_REG                (AST_RFX_VA_BASE + 0x58)
+#define RFX_QUANT_CBL_REG               (AST_RFX_VA_BASE + 0x5C)
+#define RFX_QUANT_CBH_REG               (AST_RFX_VA_BASE + 0x60)
+#define RFX_QUANT_CRL_REG               (AST_RFX_VA_BASE + 0x64)
+#define RFX_QUANT_CRH_REG               (AST_RFX_VA_BASE + 0x68)
+#define RFX_IDWT_FIFO_REG               (AST_RFX_VA_BASE + 0x6C)
+#define RFX_DRAM_FIFO_CTRL_REG          (AST_RFX_VA_BASE + 0x70)
+#define RFX_BASE_ADDR_Y_REG             (AST_RFX_VA_BASE + 0x80)
+#define RFX_BASE_ADDR_CB_REG            (AST_RFX_VA_BASE + 0x84)
+#define RFX_BASE_ADDR_CR_REG            (AST_RFX_VA_BASE + 0x88)
+#define RFX_BASE_ADDR_Y_1_REG           (AST_RFX_VA_BASE + 0x8C)
+#define RFX_BASE_ADDR_CB_1_REG          (AST_RFX_VA_BASE + 0x90)
+#define RFX_BASE_ADDR_CR_1_REG          (AST_RFX_VA_BASE + 0x94)
+#define RFX_BASE_ADDR_RECT_LIST_REG     (AST_RFX_VA_BASE + 0x98)
+#define RFX_DEC_CTRL_1_REG              (AST_RFX_VA_BASE + 0x9C)
+#define RFX_DEC_CTRL_2_REG              (AST_RFX_VA_BASE + 0xA0)
+#define RFX_BASE_ADDR_FRM_MASK_1_REG    (AST_RFX_VA_BASE + 0xA4)
+#define RFX_BASE_ADDR_FRM_MASK_2_REG    (AST_RFX_VA_BASE + 0xA8)
+#define RFX_FRM_MASK_LEN_REG            (AST_RFX_VA_BASE + 0xAC)
+#define RFX_POST_DEC_STAT_1_REG         (AST_RFX_VA_BASE + 0xC0)
+#define RFX_POST_DEC_STAT_2_REG         (AST_RFX_VA_BASE + 0xC4)
+#define RFX_POST_DEC_STAT_3_REG         (AST_RFX_VA_BASE + 0xC8)
+#define RFX_POST_DEC_STAT_4_REG         (AST_RFX_VA_BASE + 0xCC)
+#define RFX_POST_DEC_STAT_5_REG         (AST_RFX_VA_BASE + 0xD0)
+#define RFX_POST_DEC_STAT_6_REG         (AST_RFX_VA_BASE + 0xD4)
+#define RFX_POST_DEC_STAT_7_REG         (AST_RFX_VA_BASE + 0xD8)
+#define RFX_POST_DEC_STAT_8_REG         (AST_RFX_VA_BASE + 0xDC)
+#endif
diff -Naur linux-5.2.8/arch/arm/include/mach/platform.h linux/arch/arm/include/mach/platform.h
--- linux-5.2.8/arch/arm/include/mach/platform.h	1969-12-31 19:00:00.000000000 -0500
+++ linux/arch/arm/include/mach/platform.h	2019-09-03 14:27:57.556110489 -0400
@@ -0,0 +1,33 @@
+/*
+ *  linux/include/asm-arm/arch-astvb/platform.h
+ *
+ *  This file contains the AST SOC specific values
+ *
+ *  Copyright (C) 1999 ARM Limited.
+ *  Copyright (C) 2005 American Megatrends Inc
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef     _PLATFORM_ASTEVB_H_
+#define     _PLATFORM_ASTEVB_H_
+
+#include <mach/hardware.h>
+
+#include <mach/hwmap.h>
+#include <mach/hwreg.h>
+#include <mach/hwdef.h>
+
+#endif
